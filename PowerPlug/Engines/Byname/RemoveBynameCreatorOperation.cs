using System;
using System.Collections.Generic;
using System.Management.Automation;
using PowerPlug.BaseCmdlets;
using PowerPlug.Cmdlets;
using PowerPlug.Engines.Byname.Base;
using PowerPlug.PowerPlugFile;

namespace PowerPlug.Engines.Byname
{
    public class RemoveBynameCreatorOperation : BynameCreatorStrategy
    {
        protected RemoveBynameCmdlet AliasCmdlet { get; }

        protected const string RemoveAliasCommand = "Remove-Alias";
        public RemoveBynameCreatorOperation(RemoveBynameCmdlet cmdlet, IEnumerable<PSObject> commandResults) : base(commandResults)
        {
            AliasCmdlet = cmdlet;
        }
    
        public override void ExecuteCommand()
        {
            foreach (var r in PsCommandResults)
            {
                AliasCmdlet.WriteObject(r);
            }
            RemoveBynameFromFile(this.AliasCmdlet, ProfileInfo);
        }

        internal static void RemoveBynameFromFile(IByname bb, PowerPlugFileBase powerPlugFile)
        {
            bool Del(string s) => s.StartsWith($"New-Alias -Name {bb.Name}");
            var line = powerPlugFile.FindInFile(Del);

            if (line == -1) { return; }

            var ln = powerPlugFile.GetValueAtLine(line);
            var lns = ln[ln.IndexOf("New-Alias", StringComparison.Ordinal)..];
            var value = lns.Split(' ')[4];
            var checkFunction = powerPlugFile.FindInFile(s => s.StartsWith($"function {value}"));

            if (checkFunction != -1)
            {
                powerPlugFile.RemoveLine(checkFunction);
            }

            powerPlugFile.RemoveLine(powerPlugFile.FindInFile(s => s == "# Autogenerated Profile Alias - Do Not Modify"));
            powerPlugFile.RemoveLine(powerPlugFile.FindInFile(Del));
        }
    }
}