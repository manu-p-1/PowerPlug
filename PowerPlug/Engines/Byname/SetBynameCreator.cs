using System.Text;
using PowerPlug.BaseCmdlets;

namespace PowerPlug.Engines.Byname
{
    public class SetBynameCreator : CreatableBynameCreatorBase
    {
        public SetBynameCreator(WritableBynameBase cmdlet) : base(cmdlet) { }

        public sealed override void Execute()
        {
            var sb = new StringBuilder("\n# Autogenerated Profile Alias - Do Not Modify\n");
            foreach (var p in RunCommand(SetAliasCommand))
            {
                AliasCmdlet.WriteObject(p);
            }

            if (AliasValueType is FunctionValueType ft)
            {
                sb.Append($"function {AliasCmdlet.Value} {{ {ft.ScriptBlock} }}\n");
            }

            sb.Append("New-Alias")
                .Append($" -Name {AliasCmdlet.Name}")
                .Append($" -Value {AliasCmdlet.Value}")
                .Append($" -Option {AliasCmdlet.Option}")
                .Append($" -Scope {AliasCmdlet.Scope}")
                .AppendIf(" -PassThru", AliasCmdlet.PassThru)
                .AppendIf(" -Force", AliasCmdlet.Force)
                .AppendIf(" -WhatIf", AliasCmdlet.WhatIf)
                .AppendIf(" -Confirm", AliasCmdlet.Confirm)
                .AppendIf($" -Description {AliasCmdlet.Description}", AliasCmdlet.Description != string.Empty);

            RemoveBynameCreator.RemoveBynameFromFile(this.AliasCmdlet, ProfileInfo);
            ProfileInfo.WriteLine(sb.ToString());
        }
    }
}
