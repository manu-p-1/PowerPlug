{
  "api/index.html": {
    "href": "api/index.html",
    "title": "PLACEHOLDER",
    "keywords": "PLACEHOLDER TODO: Add .NET projects to the src folder and run docfx to generate REAL API Documentation !"
  },
  "api/PowerPlug.BaseCmdlets.BynameBase.html": {
    "href": "api/PowerPlug.BaseCmdlets.BynameBase.html",
    "title": "Class BynameBase",
    "keywords": "Class BynameBase Represents the base structure of a Byname. All Byname cmdlet's stem from PSCmdlet. Inheritance System.Object System.Management.Automation.Internal.InternalCommand System.Management.Automation.Cmdlet System.Management.Automation.PSCmdlet BynameBase WritableByname RemoveBynameCmdlet Inherited Members System.Management.Automation.PSCmdlet.CurrentProviderLocation(System.String) System.Management.Automation.PSCmdlet.GetResolvedProviderPathFromPSPath(System.String, System.Management.Automation.ProviderInfo) System.Management.Automation.PSCmdlet.GetUnresolvedProviderPathFromPSPath(System.String) System.Management.Automation.PSCmdlet.GetVariableValue(System.String) System.Management.Automation.PSCmdlet.GetVariableValue(System.String, System.Object) System.Management.Automation.PSCmdlet.Events System.Management.Automation.PSCmdlet.Host System.Management.Automation.PSCmdlet.InvokeCommand System.Management.Automation.PSCmdlet.InvokeProvider System.Management.Automation.PSCmdlet.JobManager System.Management.Automation.PSCmdlet.JobRepository System.Management.Automation.PSCmdlet.MyInvocation System.Management.Automation.PSCmdlet.PagingParameters System.Management.Automation.PSCmdlet.ParameterSetName System.Management.Automation.PSCmdlet.SessionState System.Management.Automation.Cmdlet.BeginProcessing() System.Management.Automation.Cmdlet.EndProcessing() System.Management.Automation.Cmdlet.GetResourceString(System.String, System.String) System.Management.Automation.Cmdlet.Invoke() System.Management.Automation.Cmdlet.Invoke<T>() System.Management.Automation.Cmdlet.ProcessRecord() System.Management.Automation.Cmdlet.ShouldContinue(System.String, System.String) System.Management.Automation.Cmdlet.ShouldContinue(System.String, System.String, System.Boolean, System.Boolean, System.Boolean) System.Management.Automation.Cmdlet.ShouldContinue(System.String, System.String, System.Boolean, System.Boolean) System.Management.Automation.Cmdlet.ShouldProcess(System.String) System.Management.Automation.Cmdlet.ShouldProcess(System.String, System.String) System.Management.Automation.Cmdlet.ShouldProcess(System.String, System.String, System.String) System.Management.Automation.Cmdlet.ShouldProcess(System.String, System.String, System.String, System.Management.Automation.ShouldProcessReason) System.Management.Automation.Cmdlet.StopProcessing() System.Management.Automation.Cmdlet.ThrowTerminatingError(System.Management.Automation.ErrorRecord) System.Management.Automation.Cmdlet.TransactionAvailable() System.Management.Automation.Cmdlet.WriteCommandDetail(System.String) System.Management.Automation.Cmdlet.WriteDebug(System.String) System.Management.Automation.Cmdlet.WriteError(System.Management.Automation.ErrorRecord) System.Management.Automation.Cmdlet.WriteInformation(System.Management.Automation.InformationRecord) System.Management.Automation.Cmdlet.WriteInformation(System.Object, System.String[]) System.Management.Automation.Cmdlet.WriteObject(System.Object) System.Management.Automation.Cmdlet.WriteObject(System.Object, System.Boolean) System.Management.Automation.Cmdlet.WriteProgress(System.Management.Automation.ProgressRecord) System.Management.Automation.Cmdlet.WriteVerbose(System.String) System.Management.Automation.Cmdlet.WriteWarning(System.String) System.Management.Automation.Cmdlet.CommandRuntime System.Management.Automation.Cmdlet.CommonParameters System.Management.Automation.Cmdlet.CurrentPSTransaction System.Management.Automation.Cmdlet.OptionalCommonParameters System.Management.Automation.Cmdlet.Stopping System.Management.Automation.Internal.InternalCommand.CommandOrigin System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : PowerPlug.BaseCmdlets Assembly : PowerPlug.dll Syntax public abstract class BynameBase : PSCmdlet Properties | Improve this Doc View Source Name The Name Property of the Byname. Every Byname contains a Name property, regardless of creating a new Byname, setting an existing Byname, or removing a Byname. Declaration public abstract string Name { get; set; } Property Value Type Description System.String"
  },
  "api/PowerPlug.BaseCmdlets.html": {
    "href": "api/PowerPlug.BaseCmdlets.html",
    "title": "Namespace PowerPlug.BaseCmdlets",
    "keywords": "Namespace PowerPlug.BaseCmdlets Classes BynameBase Represents the base structure of a Byname. All Byname cmdlet's stem from PSCmdlet. WritableByname Represents a Byname that can be written or modified to the user's $PROFILE."
  },
  "api/PowerPlug.BaseCmdlets.WritableByname.html": {
    "href": "api/PowerPlug.BaseCmdlets.WritableByname.html",
    "title": "Class WritableByname",
    "keywords": "Class WritableByname Represents a Byname that can be written or modified to the user's $PROFILE. Inheritance System.Object System.Management.Automation.Internal.InternalCommand System.Management.Automation.Cmdlet System.Management.Automation.PSCmdlet BynameBase WritableByname NewBynameCmdlet SetBynameCmdlet Inherited Members System.Management.Automation.PSCmdlet.CurrentProviderLocation(System.String) System.Management.Automation.PSCmdlet.GetResolvedProviderPathFromPSPath(System.String, System.Management.Automation.ProviderInfo) System.Management.Automation.PSCmdlet.GetUnresolvedProviderPathFromPSPath(System.String) System.Management.Automation.PSCmdlet.GetVariableValue(System.String) System.Management.Automation.PSCmdlet.GetVariableValue(System.String, System.Object) System.Management.Automation.PSCmdlet.Events System.Management.Automation.PSCmdlet.Host System.Management.Automation.PSCmdlet.InvokeCommand System.Management.Automation.PSCmdlet.InvokeProvider System.Management.Automation.PSCmdlet.JobManager System.Management.Automation.PSCmdlet.JobRepository System.Management.Automation.PSCmdlet.MyInvocation System.Management.Automation.PSCmdlet.PagingParameters System.Management.Automation.PSCmdlet.ParameterSetName System.Management.Automation.PSCmdlet.SessionState System.Management.Automation.Cmdlet.BeginProcessing() System.Management.Automation.Cmdlet.EndProcessing() System.Management.Automation.Cmdlet.GetResourceString(System.String, System.String) System.Management.Automation.Cmdlet.Invoke() System.Management.Automation.Cmdlet.Invoke<T>() System.Management.Automation.Cmdlet.ProcessRecord() System.Management.Automation.Cmdlet.ShouldContinue(System.String, System.String) System.Management.Automation.Cmdlet.ShouldContinue(System.String, System.String, System.Boolean, System.Boolean, System.Boolean) System.Management.Automation.Cmdlet.ShouldContinue(System.String, System.String, System.Boolean, System.Boolean) System.Management.Automation.Cmdlet.ShouldProcess(System.String) System.Management.Automation.Cmdlet.ShouldProcess(System.String, System.String) System.Management.Automation.Cmdlet.ShouldProcess(System.String, System.String, System.String) System.Management.Automation.Cmdlet.ShouldProcess(System.String, System.String, System.String, System.Management.Automation.ShouldProcessReason) System.Management.Automation.Cmdlet.StopProcessing() System.Management.Automation.Cmdlet.ThrowTerminatingError(System.Management.Automation.ErrorRecord) System.Management.Automation.Cmdlet.TransactionAvailable() System.Management.Automation.Cmdlet.WriteCommandDetail(System.String) System.Management.Automation.Cmdlet.WriteDebug(System.String) System.Management.Automation.Cmdlet.WriteError(System.Management.Automation.ErrorRecord) System.Management.Automation.Cmdlet.WriteInformation(System.Management.Automation.InformationRecord) System.Management.Automation.Cmdlet.WriteInformation(System.Object, System.String[]) System.Management.Automation.Cmdlet.WriteObject(System.Object) System.Management.Automation.Cmdlet.WriteObject(System.Object, System.Boolean) System.Management.Automation.Cmdlet.WriteProgress(System.Management.Automation.ProgressRecord) System.Management.Automation.Cmdlet.WriteVerbose(System.String) System.Management.Automation.Cmdlet.WriteWarning(System.String) System.Management.Automation.Cmdlet.CommandRuntime System.Management.Automation.Cmdlet.CommonParameters System.Management.Automation.Cmdlet.CurrentPSTransaction System.Management.Automation.Cmdlet.OptionalCommonParameters System.Management.Automation.Cmdlet.Stopping System.Management.Automation.Internal.InternalCommand.CommandOrigin System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : PowerPlug.BaseCmdlets Assembly : PowerPlug.dll Syntax public abstract class WritableByname : BynameBase Properties | Improve this Doc View Source Confirm Displays a confirmation dialog to require user input to execute the command. Declaration [Parameter] public SwitchParameter Confirm { get; set; } Property Value Type Description System.Management.Automation.SwitchParameter | Improve this Doc View Source Description The description for the alias. Declaration [Parameter] public string Description { get; set; } Property Value Type Description System.String | Improve this Doc View Source Force If set to true and an existing alias of the same name exists and is ReadOnly, the alias will be overwritten. Declaration [Parameter] public SwitchParameter Force { get; set; } Property Value Type Description System.Management.Automation.SwitchParameter | Improve this Doc View Source Name The Name parameter for the command. Declaration [Parameter(Position = 0, Mandatory = true, ValueFromPipelineByPropertyName = true)] public override string Name { get; set; } Property Value Type Description System.String Overrides BynameBase.Name | Improve this Doc View Source Option The Option parameter allows the alias to be set to ReadOnly (for existing aliases) and/or Constant (only for new aliases). Declaration [Parameter] public ScopedItemOptions Option { get; set; } Property Value Type Description System.Management.Automation.ScopedItemOptions | Improve this Doc View Source PassThru If set to true, the alias that is set is passed to the pipeline. Declaration [Parameter] public SwitchParameter PassThru { get; set; } Property Value Type Description System.Management.Automation.SwitchParameter | Improve this Doc View Source Scope The scope parameter for the command determines which scope the alias is set in. Declaration [Parameter] [ValidateSet(new string[]{\"Global\", \"Local\", \"Private\", \"Numbered scopes\", \"Script\"})] public string Scope { get; set; } Property Value Type Description System.String | Improve this Doc View Source Value The Value parameter for the command. Declaration [Parameter(Position = 1, Mandatory = true, ValueFromPipelineByPropertyName = true)] public string Value { get; set; } Property Value Type Description System.String | Improve this Doc View Source WhatIf Shows what would happen if the cmdlet runs. The cmdlet is not run. Declaration [Parameter] [Alias(new string[]{\"wi\"})] public SwitchParameter WhatIf { get; set; } Property Value Type Description System.Management.Automation.SwitchParameter Methods | Improve this Doc View Source ToString() Every WritableByname must have ToString overriden. This is because a Byname is simply a wrapper for the \"New-Alias\" or \"Set-Alias\" command. Therefore, the ToString method represents the either of the previously mentioned alias commands as a string in it's fully qualified form. Declaration public abstract override string ToString() Returns Type Description System.String A string representing the entire command with all options included in the string Overrides System.Object.ToString()"
  },
  "api/PowerPlug.Cmdlets.Byname.html": {
    "href": "api/PowerPlug.Cmdlets.Byname.html",
    "title": "Namespace PowerPlug.Cmdlets.Byname",
    "keywords": "Namespace PowerPlug.Cmdlets.Byname Classes NewBynameCmdlet Creates a new Byname New-Byname is a wrapper cmdlet for the New-Alias cmdlet, however, the fully qualified command name is written to the user's $PROFILE. An error is thrown if no $PROFILE exists. This cmdlet is to be used for trivial purposes to quickly persist an alias across sessions. It should not be used outside of the PowerShell Console in order to prevent unintended behavior. nbn A sample New-Byname command New-Byname -Name list -Value Get-ChildItem RemoveBynameCmdlet Removes a new Byname Remove-Byname is a wrapper cmdlet for the Remove-Alias cmdlet. All instances of the The fully qualified command name are removed from the $PROFILE. An error is thrown if no $PROFILE exists. This cmdlet is to be used for trivial purposes to quickly persist an alias across sessions. It should not be used outside of the PowerShell Console in order to prevent unintended behavior. Extra precaution should be used when using Remove-Byname as it removes all aliases with the same name from the $PROFILE. rbn A sample Remove-Byname command Remove-Byname -Name list SetBynameCmdlet Sets a new Byname Set-Byname is a wrapper cmdlet for the Set-Alias cmdlet, however, the fully qualified command name is written to the user's $PROFILE. An error is thrown if no $PROFILE exists. This cmdlet is to be used for trivial purposes to quickly persist an alias across sessions. It should not be used outside of the PowerShell Console in order to prevent unintended behavior. sbn A sample Set-Byname command Set-Byname -Name gh -Value Get-Help"
  },
  "api/PowerPlug.Cmdlets.Byname.NewBynameCmdlet.html": {
    "href": "api/PowerPlug.Cmdlets.Byname.NewBynameCmdlet.html",
    "title": "Class NewBynameCmdlet",
    "keywords": "Class NewBynameCmdlet Creates a new Byname New-Byname is a wrapper cmdlet for the New-Alias cmdlet, however, the fully qualified command name is written to the user's $PROFILE. An error is thrown if no $PROFILE exists. This cmdlet is to be used for trivial purposes to quickly persist an alias across sessions. It should not be used outside of the PowerShell Console in order to prevent unintended behavior. nbn A sample New-Byname command New-Byname -Name list -Value Get-ChildItem Inheritance System.Object System.Management.Automation.Internal.InternalCommand System.Management.Automation.Cmdlet System.Management.Automation.PSCmdlet BynameBase WritableByname NewBynameCmdlet Inherited Members WritableByname.Name WritableByname.Scope WritableByname.Force WritableByname.Value WritableByname.Description WritableByname.Option WritableByname.PassThru WritableByname.WhatIf WritableByname.Confirm System.Management.Automation.PSCmdlet.CurrentProviderLocation(System.String) System.Management.Automation.PSCmdlet.GetResolvedProviderPathFromPSPath(System.String, System.Management.Automation.ProviderInfo) System.Management.Automation.PSCmdlet.GetUnresolvedProviderPathFromPSPath(System.String) System.Management.Automation.PSCmdlet.GetVariableValue(System.String) System.Management.Automation.PSCmdlet.GetVariableValue(System.String, System.Object) System.Management.Automation.PSCmdlet.Events System.Management.Automation.PSCmdlet.Host System.Management.Automation.PSCmdlet.InvokeCommand System.Management.Automation.PSCmdlet.InvokeProvider System.Management.Automation.PSCmdlet.JobManager System.Management.Automation.PSCmdlet.JobRepository System.Management.Automation.PSCmdlet.MyInvocation System.Management.Automation.PSCmdlet.PagingParameters System.Management.Automation.PSCmdlet.ParameterSetName System.Management.Automation.PSCmdlet.SessionState System.Management.Automation.Cmdlet.BeginProcessing() System.Management.Automation.Cmdlet.EndProcessing() System.Management.Automation.Cmdlet.GetResourceString(System.String, System.String) System.Management.Automation.Cmdlet.Invoke() System.Management.Automation.Cmdlet.Invoke<T>() System.Management.Automation.Cmdlet.ShouldContinue(System.String, System.String) System.Management.Automation.Cmdlet.ShouldContinue(System.String, System.String, System.Boolean, System.Boolean, System.Boolean) System.Management.Automation.Cmdlet.ShouldContinue(System.String, System.String, System.Boolean, System.Boolean) System.Management.Automation.Cmdlet.ShouldProcess(System.String) System.Management.Automation.Cmdlet.ShouldProcess(System.String, System.String) System.Management.Automation.Cmdlet.ShouldProcess(System.String, System.String, System.String) System.Management.Automation.Cmdlet.ShouldProcess(System.String, System.String, System.String, System.Management.Automation.ShouldProcessReason) System.Management.Automation.Cmdlet.StopProcessing() System.Management.Automation.Cmdlet.ThrowTerminatingError(System.Management.Automation.ErrorRecord) System.Management.Automation.Cmdlet.TransactionAvailable() System.Management.Automation.Cmdlet.WriteCommandDetail(System.String) System.Management.Automation.Cmdlet.WriteDebug(System.String) System.Management.Automation.Cmdlet.WriteError(System.Management.Automation.ErrorRecord) System.Management.Automation.Cmdlet.WriteInformation(System.Management.Automation.InformationRecord) System.Management.Automation.Cmdlet.WriteInformation(System.Object, System.String[]) System.Management.Automation.Cmdlet.WriteObject(System.Object) System.Management.Automation.Cmdlet.WriteObject(System.Object, System.Boolean) System.Management.Automation.Cmdlet.WriteProgress(System.Management.Automation.ProgressRecord) System.Management.Automation.Cmdlet.WriteVerbose(System.String) System.Management.Automation.Cmdlet.WriteWarning(System.String) System.Management.Automation.Cmdlet.CommandRuntime System.Management.Automation.Cmdlet.CommonParameters System.Management.Automation.Cmdlet.CurrentPSTransaction System.Management.Automation.Cmdlet.OptionalCommonParameters System.Management.Automation.Cmdlet.Stopping System.Management.Automation.Internal.InternalCommand.CommandOrigin System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : PowerPlug.Cmdlets.Byname Assembly : PowerPlug.dll Syntax [Cmdlet(\"New\", \"Byname\", HelpUri = \"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/new-alias?view=powershell-7\")] [Alias(new string[]{\"nbn\"})] public class NewBynameCmdlet : WritableByname Methods | Improve this Doc View Source ProcessRecord() Processes the New-Byname PSCmdlet. Declaration protected override void ProcessRecord() Overrides System.Management.Automation.Cmdlet.ProcessRecord() | Improve this Doc View Source ToString() Every WritableByname must have ToString overriden. This is because a Byname is simply a wrapper for the \"New-Alias\" or \"Set-Alias\" command. Therefore, the ToString method represents the either of the previously mentioned alias commands as a string in it's fully qualified form. Declaration public override string ToString() Returns Type Description System.String A string representing the entire command with all options included in the string Overrides WritableByname.ToString()"
  },
  "api/PowerPlug.Cmdlets.Byname.RemoveBynameCmdlet.html": {
    "href": "api/PowerPlug.Cmdlets.Byname.RemoveBynameCmdlet.html",
    "title": "Class RemoveBynameCmdlet",
    "keywords": "Class RemoveBynameCmdlet Removes a new Byname Remove-Byname is a wrapper cmdlet for the Remove-Alias cmdlet. All instances of the The fully qualified command name are removed from the $PROFILE. An error is thrown if no $PROFILE exists. This cmdlet is to be used for trivial purposes to quickly persist an alias across sessions. It should not be used outside of the PowerShell Console in order to prevent unintended behavior. Extra precaution should be used when using Remove-Byname as it removes all aliases with the same name from the $PROFILE. rbn A sample Remove-Byname command Remove-Byname -Name list Inheritance System.Object System.Management.Automation.Internal.InternalCommand System.Management.Automation.Cmdlet System.Management.Automation.PSCmdlet BynameBase RemoveBynameCmdlet Inherited Members System.Management.Automation.PSCmdlet.CurrentProviderLocation(System.String) System.Management.Automation.PSCmdlet.GetResolvedProviderPathFromPSPath(System.String, System.Management.Automation.ProviderInfo) System.Management.Automation.PSCmdlet.GetUnresolvedProviderPathFromPSPath(System.String) System.Management.Automation.PSCmdlet.GetVariableValue(System.String) System.Management.Automation.PSCmdlet.GetVariableValue(System.String, System.Object) System.Management.Automation.PSCmdlet.Events System.Management.Automation.PSCmdlet.Host System.Management.Automation.PSCmdlet.InvokeCommand System.Management.Automation.PSCmdlet.InvokeProvider System.Management.Automation.PSCmdlet.JobManager System.Management.Automation.PSCmdlet.JobRepository System.Management.Automation.PSCmdlet.MyInvocation System.Management.Automation.PSCmdlet.PagingParameters System.Management.Automation.PSCmdlet.ParameterSetName System.Management.Automation.PSCmdlet.SessionState System.Management.Automation.Cmdlet.BeginProcessing() System.Management.Automation.Cmdlet.EndProcessing() System.Management.Automation.Cmdlet.GetResourceString(System.String, System.String) System.Management.Automation.Cmdlet.Invoke() System.Management.Automation.Cmdlet.Invoke<T>() System.Management.Automation.Cmdlet.ShouldContinue(System.String, System.String) System.Management.Automation.Cmdlet.ShouldContinue(System.String, System.String, System.Boolean, System.Boolean, System.Boolean) System.Management.Automation.Cmdlet.ShouldContinue(System.String, System.String, System.Boolean, System.Boolean) System.Management.Automation.Cmdlet.ShouldProcess(System.String) System.Management.Automation.Cmdlet.ShouldProcess(System.String, System.String) System.Management.Automation.Cmdlet.ShouldProcess(System.String, System.String, System.String) System.Management.Automation.Cmdlet.ShouldProcess(System.String, System.String, System.String, System.Management.Automation.ShouldProcessReason) System.Management.Automation.Cmdlet.StopProcessing() System.Management.Automation.Cmdlet.ThrowTerminatingError(System.Management.Automation.ErrorRecord) System.Management.Automation.Cmdlet.TransactionAvailable() System.Management.Automation.Cmdlet.WriteCommandDetail(System.String) System.Management.Automation.Cmdlet.WriteDebug(System.String) System.Management.Automation.Cmdlet.WriteError(System.Management.Automation.ErrorRecord) System.Management.Automation.Cmdlet.WriteInformation(System.Management.Automation.InformationRecord) System.Management.Automation.Cmdlet.WriteInformation(System.Object, System.String[]) System.Management.Automation.Cmdlet.WriteObject(System.Object) System.Management.Automation.Cmdlet.WriteObject(System.Object, System.Boolean) System.Management.Automation.Cmdlet.WriteProgress(System.Management.Automation.ProgressRecord) System.Management.Automation.Cmdlet.WriteVerbose(System.String) System.Management.Automation.Cmdlet.WriteWarning(System.String) System.Management.Automation.Cmdlet.CommandRuntime System.Management.Automation.Cmdlet.CommonParameters System.Management.Automation.Cmdlet.CurrentPSTransaction System.Management.Automation.Cmdlet.OptionalCommonParameters System.Management.Automation.Cmdlet.Stopping System.Management.Automation.Internal.InternalCommand.CommandOrigin System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : PowerPlug.Cmdlets.Byname Assembly : PowerPlug.dll Syntax [Cmdlet(\"Remove\", \"Byname\", HelpUri = \"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/remove-alias?view=powershell-7\")] [Alias(new string[]{\"rbn\"})] public class RemoveBynameCmdlet : BynameBase Properties | Improve this Doc View Source Force If set to true and an existing alias of the same name exists and is ReadOnly, the alias will be overwritten. Declaration [Parameter] public SwitchParameter Force { get; set; } Property Value Type Description System.Management.Automation.SwitchParameter | Improve this Doc View Source Name The Name parameter for the command. Declaration [Parameter(Position = 0, Mandatory = true, ValueFromPipelineByPropertyName = true)] public override string Name { get; set; } Property Value Type Description System.String Overrides BynameBase.Name | Improve this Doc View Source Scope The scope parameter for the command determines which scope the alias is set in. Declaration [Parameter] [ValidateSet(new string[]{\"Global\", \"Local\", \"Script\"})] public string Scope { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source ProcessRecord() Processes the Remove-Byname PSCmdlet. Declaration protected override void ProcessRecord() Overrides System.Management.Automation.Cmdlet.ProcessRecord() | Improve this Doc View Source ToString() The fully qualified Remove-Byname command as it's executed in the command-line. Because Remove-Byname is a wrapper for Remove-Alias, the ToString version uses Remove-Alias as the cmdlet name. Declaration public override string ToString() Returns Type Description System.String A string representing the entire command with all options included in the string Overrides System.Object.ToString()"
  },
  "api/PowerPlug.Cmdlets.Byname.SetBynameCmdlet.html": {
    "href": "api/PowerPlug.Cmdlets.Byname.SetBynameCmdlet.html",
    "title": "Class SetBynameCmdlet",
    "keywords": "Class SetBynameCmdlet Sets a new Byname Set-Byname is a wrapper cmdlet for the Set-Alias cmdlet, however, the fully qualified command name is written to the user's $PROFILE. An error is thrown if no $PROFILE exists. This cmdlet is to be used for trivial purposes to quickly persist an alias across sessions. It should not be used outside of the PowerShell Console in order to prevent unintended behavior. sbn A sample Set-Byname command Set-Byname -Name gh -Value Get-Help Inheritance System.Object System.Management.Automation.Internal.InternalCommand System.Management.Automation.Cmdlet System.Management.Automation.PSCmdlet BynameBase WritableByname SetBynameCmdlet Inherited Members WritableByname.Name WritableByname.Scope WritableByname.Force WritableByname.Value WritableByname.Description WritableByname.Option WritableByname.PassThru WritableByname.WhatIf WritableByname.Confirm System.Management.Automation.PSCmdlet.CurrentProviderLocation(System.String) System.Management.Automation.PSCmdlet.GetResolvedProviderPathFromPSPath(System.String, System.Management.Automation.ProviderInfo) System.Management.Automation.PSCmdlet.GetUnresolvedProviderPathFromPSPath(System.String) System.Management.Automation.PSCmdlet.GetVariableValue(System.String) System.Management.Automation.PSCmdlet.GetVariableValue(System.String, System.Object) System.Management.Automation.PSCmdlet.Events System.Management.Automation.PSCmdlet.Host System.Management.Automation.PSCmdlet.InvokeCommand System.Management.Automation.PSCmdlet.InvokeProvider System.Management.Automation.PSCmdlet.JobManager System.Management.Automation.PSCmdlet.JobRepository System.Management.Automation.PSCmdlet.MyInvocation System.Management.Automation.PSCmdlet.PagingParameters System.Management.Automation.PSCmdlet.ParameterSetName System.Management.Automation.PSCmdlet.SessionState System.Management.Automation.Cmdlet.BeginProcessing() System.Management.Automation.Cmdlet.EndProcessing() System.Management.Automation.Cmdlet.GetResourceString(System.String, System.String) System.Management.Automation.Cmdlet.Invoke() System.Management.Automation.Cmdlet.Invoke<T>() System.Management.Automation.Cmdlet.ShouldContinue(System.String, System.String) System.Management.Automation.Cmdlet.ShouldContinue(System.String, System.String, System.Boolean, System.Boolean, System.Boolean) System.Management.Automation.Cmdlet.ShouldContinue(System.String, System.String, System.Boolean, System.Boolean) System.Management.Automation.Cmdlet.ShouldProcess(System.String) System.Management.Automation.Cmdlet.ShouldProcess(System.String, System.String) System.Management.Automation.Cmdlet.ShouldProcess(System.String, System.String, System.String) System.Management.Automation.Cmdlet.ShouldProcess(System.String, System.String, System.String, System.Management.Automation.ShouldProcessReason) System.Management.Automation.Cmdlet.StopProcessing() System.Management.Automation.Cmdlet.ThrowTerminatingError(System.Management.Automation.ErrorRecord) System.Management.Automation.Cmdlet.TransactionAvailable() System.Management.Automation.Cmdlet.WriteCommandDetail(System.String) System.Management.Automation.Cmdlet.WriteDebug(System.String) System.Management.Automation.Cmdlet.WriteError(System.Management.Automation.ErrorRecord) System.Management.Automation.Cmdlet.WriteInformation(System.Management.Automation.InformationRecord) System.Management.Automation.Cmdlet.WriteInformation(System.Object, System.String[]) System.Management.Automation.Cmdlet.WriteObject(System.Object) System.Management.Automation.Cmdlet.WriteObject(System.Object, System.Boolean) System.Management.Automation.Cmdlet.WriteProgress(System.Management.Automation.ProgressRecord) System.Management.Automation.Cmdlet.WriteVerbose(System.String) System.Management.Automation.Cmdlet.WriteWarning(System.String) System.Management.Automation.Cmdlet.CommandRuntime System.Management.Automation.Cmdlet.CommonParameters System.Management.Automation.Cmdlet.CurrentPSTransaction System.Management.Automation.Cmdlet.OptionalCommonParameters System.Management.Automation.Cmdlet.Stopping System.Management.Automation.Internal.InternalCommand.CommandOrigin System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : PowerPlug.Cmdlets.Byname Assembly : PowerPlug.dll Syntax [Cmdlet(\"Set\", \"Byname\", HelpUri = \"https://docs.microsoft.com/en-us/powershell/module/Microsoft.PowerShell.Utility/Set-Alias?view=powershell-7\")] [Alias(new string[]{\"sbn\"})] public class SetBynameCmdlet : WritableByname Methods | Improve this Doc View Source ProcessRecord() Processes the Set-Byname PSCmdlet. Declaration protected override void ProcessRecord() Overrides System.Management.Automation.Cmdlet.ProcessRecord() | Improve this Doc View Source ToString() Every WritableByname must have ToString overriden. This is because a Byname is simply a wrapper for the \"New-Alias\" or \"Set-Alias\" command. Therefore, the ToString method represents the either of the previously mentioned alias commands as a string in it's fully qualified form. Declaration public override string ToString() Returns Type Description System.String A string representing the entire command with all options included in the string Overrides WritableByname.ToString()"
  },
  "api/PowerPlug.Cmdlets.CompareHashCmdlet.html": {
    "href": "api/PowerPlug.Cmdlets.CompareHashCmdlet.html",
    "title": "Class CompareHashCmdlet",
    "keywords": "Class CompareHashCmdlet Compares a file's user specified hash with another signature This function will compare a user defined hash of a file, such as an executable with the known signature of the file. This is especially useful since hashed values are long. The current supported hashes are SHA256, SHA512, MD5. trash A sample Compare-Sha256 command Compare-Hash .\\audacity-win-2.4.2.exe 1f20cd153b2c322bf1ff9941e4e5204098abdc7da37250ce3fb38612b3e927bc Inheritance System.Object System.Management.Automation.Internal.InternalCommand System.Management.Automation.Cmdlet System.Management.Automation.PSCmdlet CompareHashCmdlet Inherited Members System.Management.Automation.PSCmdlet.CurrentProviderLocation(System.String) System.Management.Automation.PSCmdlet.GetResolvedProviderPathFromPSPath(System.String, System.Management.Automation.ProviderInfo) System.Management.Automation.PSCmdlet.GetUnresolvedProviderPathFromPSPath(System.String) System.Management.Automation.PSCmdlet.GetVariableValue(System.String) System.Management.Automation.PSCmdlet.GetVariableValue(System.String, System.Object) System.Management.Automation.PSCmdlet.Events System.Management.Automation.PSCmdlet.Host System.Management.Automation.PSCmdlet.InvokeCommand System.Management.Automation.PSCmdlet.InvokeProvider System.Management.Automation.PSCmdlet.JobManager System.Management.Automation.PSCmdlet.JobRepository System.Management.Automation.PSCmdlet.MyInvocation System.Management.Automation.PSCmdlet.PagingParameters System.Management.Automation.PSCmdlet.ParameterSetName System.Management.Automation.PSCmdlet.SessionState System.Management.Automation.Cmdlet.BeginProcessing() System.Management.Automation.Cmdlet.EndProcessing() System.Management.Automation.Cmdlet.GetResourceString(System.String, System.String) System.Management.Automation.Cmdlet.Invoke() System.Management.Automation.Cmdlet.Invoke<T>() System.Management.Automation.Cmdlet.ShouldContinue(System.String, System.String) System.Management.Automation.Cmdlet.ShouldContinue(System.String, System.String, System.Boolean, System.Boolean, System.Boolean) System.Management.Automation.Cmdlet.ShouldContinue(System.String, System.String, System.Boolean, System.Boolean) System.Management.Automation.Cmdlet.ShouldProcess(System.String) System.Management.Automation.Cmdlet.ShouldProcess(System.String, System.String) System.Management.Automation.Cmdlet.ShouldProcess(System.String, System.String, System.String) System.Management.Automation.Cmdlet.ShouldProcess(System.String, System.String, System.String, System.Management.Automation.ShouldProcessReason) System.Management.Automation.Cmdlet.StopProcessing() System.Management.Automation.Cmdlet.ThrowTerminatingError(System.Management.Automation.ErrorRecord) System.Management.Automation.Cmdlet.TransactionAvailable() System.Management.Automation.Cmdlet.WriteCommandDetail(System.String) System.Management.Automation.Cmdlet.WriteDebug(System.String) System.Management.Automation.Cmdlet.WriteError(System.Management.Automation.ErrorRecord) System.Management.Automation.Cmdlet.WriteInformation(System.Management.Automation.InformationRecord) System.Management.Automation.Cmdlet.WriteInformation(System.Object, System.String[]) System.Management.Automation.Cmdlet.WriteObject(System.Object) System.Management.Automation.Cmdlet.WriteObject(System.Object, System.Boolean) System.Management.Automation.Cmdlet.WriteProgress(System.Management.Automation.ProgressRecord) System.Management.Automation.Cmdlet.WriteVerbose(System.String) System.Management.Automation.Cmdlet.WriteWarning(System.String) System.Management.Automation.Cmdlet.CommandRuntime System.Management.Automation.Cmdlet.CommonParameters System.Management.Automation.Cmdlet.CurrentPSTransaction System.Management.Automation.Cmdlet.OptionalCommonParameters System.Management.Automation.Cmdlet.Stopping System.Management.Automation.Internal.InternalCommand.CommandOrigin System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : PowerPlug.Cmdlets Assembly : PowerPlug.dll Syntax [Cmdlet(\"Compare\", \"Hash\")] [Alias(new string[]{\"csh\"})] public class CompareHashCmdlet : PSCmdlet Properties | Improve this Doc View Source Hash The hashing algorithm (SHA256, SHA512, MD5) to use when comparing the signature Declaration [Alias(new string[]{\"HashType\"})] [Parameter(Position = 0, Mandatory = true, HelpMessage = \"Choose from: [SHA256, SHA512, MD5] corresponding to the signature\")] [ValidateSet(new string[]{\"SHA256\", \"SHA512\", \"MD5\"})] public string Hash { get; set; } Property Value Type Description System.String | Improve this Doc View Source Path The path to the file Declaration [Alias(new string[]{\"FilePath\"})] [Parameter(Position = 1, Mandatory = true)] public string Path { get; set; } Property Value Type Description System.String | Improve this Doc View Source Signature The the known SHA256 signature of the file Declaration [Alias(new string[]{\"KnownHash\"})] [Parameter(Position = 2, Mandatory = true, HelpMessage = \"The signature to compare the hashed file against\")] public string Signature { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source ProcessRecord() Processes the PSCmdlet Declaration protected override void ProcessRecord() Overrides System.Management.Automation.Cmdlet.ProcessRecord() Exceptions Type Condition System.NotImplementedException"
  },
  "api/PowerPlug.Cmdlets.html": {
    "href": "api/PowerPlug.Cmdlets.html",
    "title": "Namespace PowerPlug.Cmdlets",
    "keywords": "Namespace PowerPlug.Cmdlets Classes CompareHashCmdlet Compares a file's user specified hash with another signature This function will compare a user defined hash of a file, such as an executable with the known signature of the file. This is especially useful since hashed values are long. The current supported hashes are SHA256, SHA512, MD5. trash A sample Compare-Sha256 command Compare-Hash .\\audacity-win-2.4.2.exe 1f20cd153b2c322bf1ff9941e4e5204098abdc7da37250ce3fb38612b3e927bc MoveTrashCmdlet Moves a file to the Recycle Bin This function will move a file, whether directory or file, to the system Recycle Bin. If the param list is true, it will print the contents of the current directory after recycling the file. Only error dialogs are printed and no confirmation message is shown. trash A sample Move-Trash command Move-Trash -Path Documents\\file.txt -List"
  },
  "api/PowerPlug.Cmdlets.MoveTrashCmdlet.html": {
    "href": "api/PowerPlug.Cmdlets.MoveTrashCmdlet.html",
    "title": "Class MoveTrashCmdlet",
    "keywords": "Class MoveTrashCmdlet Moves a file to the Recycle Bin This function will move a file, whether directory or file, to the system Recycle Bin. If the param list is true, it will print the contents of the current directory after recycling the file. Only error dialogs are printed and no confirmation message is shown. trash A sample Move-Trash command Move-Trash -Path Documents\\file.txt -List Inheritance System.Object System.Management.Automation.Internal.InternalCommand System.Management.Automation.Cmdlet System.Management.Automation.PSCmdlet MoveTrashCmdlet Inherited Members System.Management.Automation.PSCmdlet.CurrentProviderLocation(System.String) System.Management.Automation.PSCmdlet.GetResolvedProviderPathFromPSPath(System.String, System.Management.Automation.ProviderInfo) System.Management.Automation.PSCmdlet.GetUnresolvedProviderPathFromPSPath(System.String) System.Management.Automation.PSCmdlet.GetVariableValue(System.String) System.Management.Automation.PSCmdlet.GetVariableValue(System.String, System.Object) System.Management.Automation.PSCmdlet.Events System.Management.Automation.PSCmdlet.Host System.Management.Automation.PSCmdlet.InvokeCommand System.Management.Automation.PSCmdlet.InvokeProvider System.Management.Automation.PSCmdlet.JobManager System.Management.Automation.PSCmdlet.JobRepository System.Management.Automation.PSCmdlet.MyInvocation System.Management.Automation.PSCmdlet.PagingParameters System.Management.Automation.PSCmdlet.ParameterSetName System.Management.Automation.PSCmdlet.SessionState System.Management.Automation.Cmdlet.BeginProcessing() System.Management.Automation.Cmdlet.EndProcessing() System.Management.Automation.Cmdlet.GetResourceString(System.String, System.String) System.Management.Automation.Cmdlet.Invoke() System.Management.Automation.Cmdlet.Invoke<T>() System.Management.Automation.Cmdlet.ShouldContinue(System.String, System.String) System.Management.Automation.Cmdlet.ShouldContinue(System.String, System.String, System.Boolean, System.Boolean, System.Boolean) System.Management.Automation.Cmdlet.ShouldContinue(System.String, System.String, System.Boolean, System.Boolean) System.Management.Automation.Cmdlet.ShouldProcess(System.String) System.Management.Automation.Cmdlet.ShouldProcess(System.String, System.String) System.Management.Automation.Cmdlet.ShouldProcess(System.String, System.String, System.String) System.Management.Automation.Cmdlet.ShouldProcess(System.String, System.String, System.String, System.Management.Automation.ShouldProcessReason) System.Management.Automation.Cmdlet.StopProcessing() System.Management.Automation.Cmdlet.ThrowTerminatingError(System.Management.Automation.ErrorRecord) System.Management.Automation.Cmdlet.TransactionAvailable() System.Management.Automation.Cmdlet.WriteCommandDetail(System.String) System.Management.Automation.Cmdlet.WriteDebug(System.String) System.Management.Automation.Cmdlet.WriteError(System.Management.Automation.ErrorRecord) System.Management.Automation.Cmdlet.WriteInformation(System.Management.Automation.InformationRecord) System.Management.Automation.Cmdlet.WriteInformation(System.Object, System.String[]) System.Management.Automation.Cmdlet.WriteObject(System.Object) System.Management.Automation.Cmdlet.WriteObject(System.Object, System.Boolean) System.Management.Automation.Cmdlet.WriteProgress(System.Management.Automation.ProgressRecord) System.Management.Automation.Cmdlet.WriteVerbose(System.String) System.Management.Automation.Cmdlet.WriteWarning(System.String) System.Management.Automation.Cmdlet.CommandRuntime System.Management.Automation.Cmdlet.CommonParameters System.Management.Automation.Cmdlet.CurrentPSTransaction System.Management.Automation.Cmdlet.OptionalCommonParameters System.Management.Automation.Cmdlet.Stopping System.Management.Automation.Internal.InternalCommand.CommandOrigin System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : PowerPlug.Cmdlets Assembly : PowerPlug.dll Syntax [Cmdlet(\"Move\", \"Trash\")] [Alias(new string[]{\"trash\"})] public class MoveTrashCmdlet : PSCmdlet Properties | Improve this Doc View Source List A flag indicating whether to print the contents of the current directory Declaration [Alias(new string[]{\"ListDirectory\"})] [Parameter(Position = 1, Mandatory = false)] public SwitchParameter List { get; set; } Property Value Type Description System.Management.Automation.SwitchParameter | Improve this Doc View Source Path The path to the file Declaration [Alias(new string[]{\"FilePath\"})] [Parameter(Position = 0, Mandatory = true, ValueFromPipeline = true)] public string Path { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source ProcessRecord() Processes the PSCmdlet Declaration protected override void ProcessRecord() Overrides System.Management.Automation.Cmdlet.ProcessRecord()"
  },
  "api/PowerPlug.Common.html": {
    "href": "api/PowerPlug.Common.html",
    "title": "Namespace PowerPlug.Common",
    "keywords": "Namespace PowerPlug.Common Classes ImmutableRange<T> The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. IntRange The range class represents a range of int values. Unlike other IRangify<T> implementing classes, IntRange contains an System.Collections.Generic.IEnumerator<T> of type int to enumerate through all of the values between the minimum and maximum ranges. By convention, both sides of the range should be inclusive values. Range<T> The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. Interfaces IIndexable<TKey, TVal> Specifies an indexer with one dimension. IIndexableDouble<TKey, TVal> Specifies an indexer with two dimensions. IIndexableDoubleReadOnly<TKey, TVal> Specifies a read-only indexer with two dimensions. IIndexableReadOnly<TKey, TVal> Specifies a read-only indexer with one dimension. IIndexableTriple<TKey, TVal> Specifies an indexer with three dimensions. IIndexableTripleReadOnly<TKey, TVal> Specifies a read-only indexer with three dimensions. IRangify<T> The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values."
  },
  "api/PowerPlug.Common.IIndexable-2.html": {
    "href": "api/PowerPlug.Common.IIndexable-2.html",
    "title": "Interface IIndexable<TKey, TVal>",
    "keywords": "Interface IIndexable<TKey, TVal> Specifies an indexer with one dimension. Namespace : PowerPlug.Common Assembly : PowerPlug.dll Syntax public interface IIndexable<in TKey, TVal> Type Parameters Name Description TKey The element type of the key TVal The element type of the value Properties | Improve this Doc View Source Item[TKey] Declaration TVal this[TKey key] { get; set; } Parameters Type Name Description TKey key Property Value Type Description TVal"
  },
  "api/PowerPlug.Common.IIndexableDouble-2.html": {
    "href": "api/PowerPlug.Common.IIndexableDouble-2.html",
    "title": "Interface IIndexableDouble<TKey, TVal>",
    "keywords": "Interface IIndexableDouble<TKey, TVal> Specifies an indexer with two dimensions. Namespace : PowerPlug.Common Assembly : PowerPlug.dll Syntax public interface IIndexableDouble<in TKey, TVal> Type Parameters Name Description TKey The element type of the key TVal The element type of the value Properties | Improve this Doc View Source Item[TKey, TKey] Declaration TVal this[TKey key, TKey key2] { get; set; } Parameters Type Name Description TKey key TKey key2 Property Value Type Description TVal"
  },
  "api/PowerPlug.Common.IIndexableDoubleReadOnly-2.html": {
    "href": "api/PowerPlug.Common.IIndexableDoubleReadOnly-2.html",
    "title": "Interface IIndexableDoubleReadOnly<TKey, TVal>",
    "keywords": "Interface IIndexableDoubleReadOnly<TKey, TVal> Specifies a read-only indexer with two dimensions. Namespace : PowerPlug.Common Assembly : PowerPlug.dll Syntax public interface IIndexableDoubleReadOnly<in TKey, out TVal> Type Parameters Name Description TKey The element type of the key TVal The element type of the value Properties | Improve this Doc View Source Item[TKey, TKey] Declaration TVal this[TKey key, TKey key2] { get; } Parameters Type Name Description TKey key TKey key2 Property Value Type Description TVal"
  },
  "api/PowerPlug.Common.IIndexableReadOnly-2.html": {
    "href": "api/PowerPlug.Common.IIndexableReadOnly-2.html",
    "title": "Interface IIndexableReadOnly<TKey, TVal>",
    "keywords": "Interface IIndexableReadOnly<TKey, TVal> Specifies a read-only indexer with one dimension. Namespace : PowerPlug.Common Assembly : PowerPlug.dll Syntax public interface IIndexableReadOnly<in TKey, out TVal> Type Parameters Name Description TKey The element type of the key TVal The element type of the value Properties | Improve this Doc View Source Item[TKey] Declaration TVal this[TKey key] { get; } Parameters Type Name Description TKey key Property Value Type Description TVal"
  },
  "api/PowerPlug.Common.IIndexableTriple-2.html": {
    "href": "api/PowerPlug.Common.IIndexableTriple-2.html",
    "title": "Interface IIndexableTriple<TKey, TVal>",
    "keywords": "Interface IIndexableTriple<TKey, TVal> Specifies an indexer with three dimensions. Namespace : PowerPlug.Common Assembly : PowerPlug.dll Syntax public interface IIndexableTriple<in TKey, TVal> Type Parameters Name Description TKey The element type of the key TVal The element type of the value Properties | Improve this Doc View Source Item[TKey, TKey, TKey] Declaration TVal this[TKey key, TKey key2, TKey key3] { get; set; } Parameters Type Name Description TKey key TKey key2 TKey key3 Property Value Type Description TVal"
  },
  "api/PowerPlug.Common.IIndexableTripleReadOnly-2.html": {
    "href": "api/PowerPlug.Common.IIndexableTripleReadOnly-2.html",
    "title": "Interface IIndexableTripleReadOnly<TKey, TVal>",
    "keywords": "Interface IIndexableTripleReadOnly<TKey, TVal> Specifies a read-only indexer with three dimensions. Namespace : PowerPlug.Common Assembly : PowerPlug.dll Syntax public interface IIndexableTripleReadOnly<in TKey, out TVal> Type Parameters Name Description TKey The element type of the key TVal The element type of the value Properties | Improve this Doc View Source Item[TKey, TKey, TKey] Declaration TVal this[TKey key, TKey key2, TKey key3] { get; } Parameters Type Name Description TKey key TKey key2 TKey key3 Property Value Type Description TVal"
  },
  "api/PowerPlug.Common.ImmutableRange-1.html": {
    "href": "api/PowerPlug.Common.ImmutableRange-1.html",
    "title": "Class ImmutableRange<T>",
    "keywords": "Class ImmutableRange<T> The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. Inheritance System.Object ImmutableRange<T> Implements IRangify <T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : PowerPlug.Common Assembly : PowerPlug.dll Syntax public class ImmutableRange<T> : IRangify<T> where T : IComparable<T> Type Parameters Name Description T The generic parameter Constructors | Improve this Doc View Source ImmutableRange(T, T) Creates a new instance of the ImmutableRange class. This class is immutable - for the mutable version, see Range<T> Declaration protected ImmutableRange(T minimum, T maximum) Parameters Type Name Description T minimum The minimum value T maximum The maximum value Properties | Improve this Doc View Source Maximum The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. Declaration public T Maximum { get; } Property Value Type Description T | Improve this Doc View Source Minimum The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. Declaration public T Minimum { get; } Property Value Type Description T Methods | Improve this Doc View Source ContainsRange(IRangify<T>) The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. Declaration public bool ContainsRange(IRangify<T> range) Parameters Type Name Description IRangify <T> range Returns Type Description System.Boolean | Improve this Doc View Source ContainsValue(T) The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. Declaration public bool ContainsValue(T value) Parameters Type Name Description T value The value to test Returns Type Description System.Boolean True if the value is inside Range, else false | Improve this Doc View Source IsInsideRange(IRangify<T>) The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. Declaration public bool IsInsideRange(IRangify<T> range) Parameters Type Name Description IRangify <T> range Returns Type Description System.Boolean True if range is inclusive, else false | Improve this Doc View Source IsValid() The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. Declaration public bool IsValid() Returns Type Description System.Boolean True if range is valid, else false | Improve this Doc View Source ToString() The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IRangify<T>"
  },
  "api/PowerPlug.Common.IntRange.html": {
    "href": "api/PowerPlug.Common.IntRange.html",
    "title": "Class IntRange",
    "keywords": "Class IntRange The range class represents a range of int values. Unlike other IRangify<T> implementing classes, IntRange contains an System.Collections.Generic.IEnumerator<T> of type int to enumerate through all of the values between the minimum and maximum ranges. By convention, both sides of the range should be inclusive values. Inheritance System.Object Range < System.Int32 > IntRange Implements IRangify < System.Int32 > System.Collections.Generic.IEnumerable < System.Int32 > System.Collections.IEnumerable Inherited Members Range<Int32>.Minimum Range<Int32>.Maximum Range<Int32>.ToString() Range<Int32>.IsValid() Range<Int32>.ContainsValue(Int32) Range<Int32>.IsInsideRange(IRangify<Int32>) Range<Int32>.ContainsRange(IRangify<Int32>) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : PowerPlug.Common Assembly : PowerPlug.dll Syntax public class IntRange : Range<int>, IRangify<int>, IEnumerable<int>, IEnumerable Constructors | Improve this Doc View Source IntRange(Int32, Int32) Creates a new instance of IntRange, specifying the minimum and maximum values. Declaration public IntRange(int minimum, int maximum) Parameters Type Name Description System.Int32 minimum System.Int32 maximum Methods | Improve this Doc View Source GetEnumerator() Returns an instance of the IntRangeEnumerator that's used to enumerate through the range values of this instance. Declaration public IEnumerator<int> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < System.Int32 > An instance of the IntRangeEnumerator class Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Returns an instance of the IntRangeEnumerator that's used to enumerate through the range values of this instance. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator An instance of the IntRangeEnumerator class Implements IRangify<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods EnumerableUtils.IsNullOrEmpty<T>(IEnumerable<T>) EnumerableUtils.Shuffle<T>(IEnumerable<T>) EnumerableUtils.ToString<T>(IEnumerable<T>, String, Boolean) EnumerableStats.Mean<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.Median<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.Mode<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.SampleVariance<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.PopulationVariance<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.SampleStandardDeviation<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.PopulationStandardDeviation<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.Range<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.LowerQuartile<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.UpperQuartile<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.InterQuartileRange<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.IsNormalProportion<T>(IEnumerable<T>, Func<T, Double>, Double) EnumerableStats.IsNormalMean<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.StandardizedScore<T>(IEnumerable<T>, Func<T, Double>, Double)"
  },
  "api/PowerPlug.Common.IRangify-1.html": {
    "href": "api/PowerPlug.Common.IRangify-1.html",
    "title": "Interface IRangify<T>",
    "keywords": "Interface IRangify<T> The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. Namespace : PowerPlug.Common Assembly : PowerPlug.dll Syntax public interface IRangify<T> where T : IComparable<T> Type Parameters Name Description T The generic parameter Properties | Improve this Doc View Source Maximum The maximum value of this range Declaration T Maximum { get; } Property Value Type Description T | Improve this Doc View Source Minimum The minimum value of this range Declaration T Minimum { get; } Property Value Type Description T Methods | Improve this Doc View Source ContainsValue(T) Determines if the provided value is inside the range. Declaration bool ContainsValue(T value) Parameters Type Name Description T value The value to test Returns Type Description System.Boolean True if the value is inside Range, else false | Improve this Doc View Source IsInsideRange(IRangify<T>) Determines if this Range is inside the bounds of another range. Declaration bool IsInsideRange(IRangify<T> range) Parameters Type Name Description IRangify <T> range The parent range to test on Returns Type Description System.Boolean True if range is inclusive, else false | Improve this Doc View Source IsValid() Determines if the range is valid. Declaration bool IsValid() Returns Type Description System.Boolean True if range is valid, else false"
  },
  "api/PowerPlug.Common.Range-1.html": {
    "href": "api/PowerPlug.Common.Range-1.html",
    "title": "Class Range<T>",
    "keywords": "Class Range<T> The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. Inheritance System.Object Range<T> IntRange Implements IRangify <T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : PowerPlug.Common Assembly : PowerPlug.dll Syntax public class Range<T> : IRangify<T> where T : IComparable<T> Type Parameters Name Description T The generic parameter Constructors | Improve this Doc View Source Range(T, T) Creates a new instance of the Range class. This class is mutable - for the immutable version, see ImmutableRange<T> Declaration protected Range(T minimum, T maximum) Parameters Type Name Description T minimum The minimum value T maximum The maximum value Properties | Improve this Doc View Source Maximum The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. Declaration public T Maximum { get; set; } Property Value Type Description T | Improve this Doc View Source Minimum The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. Declaration public T Minimum { get; set; } Property Value Type Description T Methods | Improve this Doc View Source ContainsRange(IRangify<T>) The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. Declaration public bool ContainsRange(IRangify<T> range) Parameters Type Name Description IRangify <T> range Returns Type Description System.Boolean | Improve this Doc View Source ContainsValue(T) The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. Declaration public bool ContainsValue(T value) Parameters Type Name Description T value The value to test Returns Type Description System.Boolean True if the value is inside Range, else false | Improve this Doc View Source IsInsideRange(IRangify<T>) The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. Declaration public bool IsInsideRange(IRangify<T> range) Parameters Type Name Description IRangify <T> range Returns Type Description System.Boolean True if range is inclusive, else false | Improve this Doc View Source IsValid() The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. Declaration public bool IsValid() Returns Type Description System.Boolean True if range is valid, else false | Improve this Doc View Source ToString() The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IRangify<T>"
  },
  "api/PowerPlug.EnumerableUtils.EnumerableUtils.html": {
    "href": "api/PowerPlug.EnumerableUtils.EnumerableUtils.html",
    "title": "Class EnumerableUtils",
    "keywords": "Class EnumerableUtils A static utility class for .NET System.Collections.Generic.IEnumerable<T> Inheritance System.Object EnumerableUtils Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : PowerPlug.EnumerableUtils Assembly : PowerPlug.dll Syntax public static class EnumerableUtils Methods | Improve this Doc View Source Concat<T>(IEnumerable<T>[]) Concatenates all IEnumerables which are specified in in the parameter. The concatenation occurs in the order specified in the parameter. Declaration public static IEnumerable<T> Concat<T>(params IEnumerable<T>[] ie) Parameters Type Name Description System.Collections.Generic.IEnumerable <T>[] ie An enumerable of all one dimensional arrays to be concatenated Returns Type Description System.Collections.Generic.IEnumerable <T> A single enumerable with all of the concatenated elements Type Parameters Name Description T The enumerable type to be used Examples This simple example shows how to call the Concat<T>(IEnumerable<T>[]) method. Exceptions Type Condition System.ArgumentNullException Is thrown if any enumerable, which is a candidate to be concatenated, is null | Improve this Doc View Source Insert<T>(ref IEnumerable<T>, Int32, Int32, T[]) Inserts the specified element at the specified index in the enumerable (modifying the original enumerable). If element at that position exits, If shifts that element and any subsequent elements to the right, adding one to their indices. The method also allows for inserting more than one element into the enumerable at one time given that they are specified. This Insert method is functionally similar to the Insert method of the List class. System.Collections.IList.Insert(System.Int32,System.Object) for information about the add method of the List class. Declaration public static IEnumerable<T> Insert<T>(ref IEnumerable<T> src, int startIdx, int amtToIns, params T[] valuesToIns) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> src The IEnumerable to be used System.Int32 startIdx The index to start insertion System.Int32 amtToIns The amount of elements to insert into the enumerable T[] valuesToIns Optionally, the values to insert into the empty indices of the new enumerable Returns Type Description System.Collections.Generic.IEnumerable <T> An enumerable of the elements inserted into the enumerable, if any Type Parameters Name Description T The type of the enumerable Examples This sample shows how to call the Insert<T>(ref IEnumerable<T>, Int32, Int32, T[]) method. Exceptions Type Condition System.IndexOutOfRangeException Thrown when the valuesToIns enumerable does not match the amount to insert (if it is greater than 0) System.IndexOutOfRangeException Thrown when the amtToIns or the startIdx is less than 0 See Also System.Collections.IList.Insert(System.Int32,System.Object) | Improve this Doc View Source IsNullOrEmpty<T>(IEnumerable<T>) Returns whether an IEnumerable is null or empty Declaration public static bool IsNullOrEmpty<T>(this IEnumerable<T> ie) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> ie The IEnumerable to be used Returns Type Description System.Boolean The truth Type Parameters Name Description T The type of the IEnumerable | Improve this Doc View Source Range(Int32, Int32) Enables python style for-loop for easier readability. This loop begins at the starting value and loops until the end - 1, Declaration public static IEnumerable<int> Range(int start, int end) Parameters Type Name Description System.Int32 start The starting counter for the loop (inclusive) System.Int32 end The ending counter for the loop (exclusive) Returns Type Description System.Collections.Generic.IEnumerable < System.Int32 > An IEnumerable representing the current index Examples This example shows how to use the Range(Int32, Int32) method. | Improve this Doc View Source Shuffle<T>(IEnumerable<T>) Cryptographically shuffles an enumerable. Declaration public static IEnumerable<T> Shuffle<T>(this IEnumerable<T> src) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> src The IEnumerable Returns Type Description System.Collections.Generic.IEnumerable <T> The Shuffled IEnumerable Type Parameters Name Description T The element type of the IEnumerable | Improve this Doc View Source Span(Int32, Int32) Enables python style for-loop for easier readability. This loop begins at the starting value and loops until the end. Declaration public static IEnumerable<int> Span(int start, int end) Parameters Type Name Description System.Int32 start The starting counter for the loop (inclusive) System.Int32 end The ending counter for the loop (inclusive) Returns Type Description System.Collections.Generic.IEnumerable < System.Int32 > An IEnumerable representing the current index Examples This example shows how to use the Span(Int32, Int32) method. | Improve this Doc View Source ToString<T>(IEnumerable<T>, String, Boolean) Prints a string representation of an enumerable. There are 4 supported lengths for the fmtExp. The default length is 0 and the default behavior depends on the type of the enumerable. If the type is primitive (based on the System.IsPrimitive property) including decimal and string, then it prints the enumerable with a space as a separator between each element. If the enumerable is not primitive, it prints the enumerable with no separator. A fmtExp of length 1 specifies a character to separate each element. The enumerable is printed out, following a default behavior, except with the specified separator rather than the default separator. A fmtExp of length 2 specifies a two characters to mark the left and right outer bounds of the enumerable, A fmtExp of length 3 specifies a character for the left outer bound of the enumerable, followed by a separator character, followed by a character for the right outer bound of the enumerable. If no separator is desired, the \"/0+\" expression can be specified.The evenlySpacedSeparator parameter specifies whether an even number of spaces should be on both sides of the separator. This parameter ignores Object type enumerables excluding decimal and string. Declaration public static string ToString<T>(this IEnumerable<T> src, string fmtExp = \"\", bool evenlySpacedSeparator = false) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> src The IEnumerable to be used System.String fmtExp The defined expression to be optionally used System.Boolean evenlySpacedSeparator Determines whether the spacing between each element should be the same Returns Type Description System.String The string representation of the enumerable Type Parameters Name Description T The type of the enumerable Examples This sample shows how to call the ToString<T>(IEnumerable<T>, String, Boolean) method. Exceptions Type Condition System.ArgumentNullException If arr is null System.FormatException If the formatting expression length is neither 0 or 3"
  },
  "api/PowerPlug.EnumerableUtils.html": {
    "href": "api/PowerPlug.EnumerableUtils.html",
    "title": "Namespace PowerPlug.EnumerableUtils",
    "keywords": "Namespace PowerPlug.EnumerableUtils Classes EnumerableUtils A static utility class for .NET System.Collections.Generic.IEnumerable<T>"
  },
  "api/PowerPlug.FileUtils.FileUtils.html": {
    "href": "api/PowerPlug.FileUtils.FileUtils.html",
    "title": "Class FileUtils",
    "keywords": "Class FileUtils A static class for File utility functions Inheritance System.Object FileUtils Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : PowerPlug.FileUtils Assembly : PowerPlug.dll Syntax public static class FileUtils Methods | Improve this Doc View Source FindInFile(FileInfo, Func<String, Boolean>) Returns the line of the matched predicate in the file. If the predicate is not found, -1 is returned. Declaration public static int FindInFile(FileInfo fileInfo, Func<string, bool> predicate) Parameters Type Name Description System.IO.FileInfo fileInfo The FileInfo instance to read from System.Func < System.String , System.Boolean > predicate The function predicate to find in the file Returns Type Description System.Int32 | Improve this Doc View Source GetDirectorySize(String) Returns the size of a directory in bytes, given an abstract file path. Declaration public static long GetDirectorySize(this string dirPath) Parameters Type Name Description System.String dirPath The path to the directory Returns Type Description System.Int64 The size of the directory in bytes | Improve this Doc View Source GetFileSize(String) Returns the size of file in bytes, given an abstract file path. Declaration public static long GetFileSize(this string filePath) Parameters Type Name Description System.String filePath The path to the file Returns Type Description System.Int64 The size of the file in bytes | Improve this Doc View Source GetRootPath() Returns a pathname to the root directory of the System. Declaration public static string GetRootPath() Returns Type Description System.String A pathname to the root directory of the System | Improve this Doc View Source GetUserPath() Returns a pathname to the user's profile folder. Declaration public static string GetUserPath() Returns Type Description System.String A pathname to the user's profile folder | Improve this Doc View Source GetValueAtLine(FileInfo, Int32) Returns the value found at a line number. Declaration public static string GetValueAtLine(FileInfo fileInfo, int line) Parameters Type Name Description System.IO.FileInfo fileInfo The FileInfo instance to read from System.Int32 line The line number to find Returns Type Description System.String | Improve this Doc View Source RemoveFromEachLine(FileInfo, String) Removes all instances of a specific value from a file if and only if the value is solely in one line. Declaration public static void RemoveFromEachLine(FileInfo fileInfo, string valToRemove) Parameters Type Name Description System.IO.FileInfo fileInfo The FileInfo instance to write the value to System.String valToRemove The value to remove | Improve this Doc View Source RemoveLine(FileInfo, Int32) Removes a specific line number from a file. Declaration public static void RemoveLine(FileInfo fileInfo, int line) Parameters Type Name Description System.IO.FileInfo fileInfo The FileInfo instance to write the value to System.Int32 line The line number to remove | Improve this Doc View Source RemoveLines(FileInfo, Int32[]) Removes a variable argument number of lines from a file. Declaration public static void RemoveLines(FileInfo fileInfo, params int[] lines) Parameters Type Name Description System.IO.FileInfo fileInfo The FileInfo instance to write the value to System.Int32 [] lines The line numbers to remove | Improve this Doc View Source ReplaceAll(FileInfo, String, String) Replaces all instances of a specific value from a file with another replacement value. Declaration public static void ReplaceAll(FileInfo fileInfo, string oldValue, string replacementValue) Parameters Type Name Description System.IO.FileInfo fileInfo The FileInfo instance to write the value to System.String oldValue The value to replace System.String replacementValue The replacement value | Improve this Doc View Source ReplaceAllByLine(FileInfo, String, String) Replaces all instances of a specific value from a file with another replacement value if and only if the old value is solely in one line. Declaration public static void ReplaceAllByLine(FileInfo fileInfo, string oldValue, string replacementValue) Parameters Type Name Description System.IO.FileInfo fileInfo The FileInfo instance to write the value to System.String oldValue The value to replace System.String replacementValue The replacement value | Improve this Doc View Source ReplaceAllInLine(FileInfo, String, String, Int32) Replaces all instances of a specific value from a file with another replacement value from a specified line Declaration public static void ReplaceAllInLine(FileInfo fileInfo, string oldValue, string replacementValue, int line) Parameters Type Name Description System.IO.FileInfo fileInfo The FileInfo instance to write the value to System.String oldValue The value to replace System.String replacementValue The replacement value System.Int32 line The line number to replace from | Improve this Doc View Source ReplaceInLines(FileInfo, Dictionary<KeyValuePair<String, String>, Int32>) Replaces all instances of a specific value from a file with another replacement value from a specified line. This overload facilitates the replacement through a Dictionary where the key's is an instance of System.Collections.Generic.KeyValuePair`2 and the value is an int. This allows for unique replacements to occur in more than one line Declaration public static void ReplaceInLines(FileInfo fileInfo, Dictionary<KeyValuePair<string, string>, int> replacementDict) Parameters Type Name Description System.IO.FileInfo fileInfo The FileInfo instance to write the value to System.Collections.Generic.Dictionary < System.Collections.Generic.KeyValuePair < System.String , System.String >, System.Int32 > replacementDict A Dictionary of replacement values and line numbers | Improve this Doc View Source ReplaceLine(FileInfo, String, Int32) Replaces an entire line with a replacement value. Declaration public static void ReplaceLine(FileInfo fileInfo, string replacementValue, int line) Parameters Type Name Description System.IO.FileInfo fileInfo The FileInfo instance to write the value to System.String replacementValue The replacement value System.Int32 line The line number to replace from | Improve this Doc View Source ReplaceLines(FileInfo, Dictionary<String, Int32>) Replace an entire line with a replacement value. This overload uses a Dictionary of replacement values and line numbers to replace more than one line. Declaration public static void ReplaceLines(FileInfo fileInfo, Dictionary<string, int> replacementValueLine) Parameters Type Name Description System.IO.FileInfo fileInfo The FileInfo instance to write the value to System.Collections.Generic.Dictionary < System.String , System.Int32 > replacementValueLine A Dictionary of replacement values and line number | Improve this Doc View Source WriteLine(FileInfo, String) Appends a string value into the file. Declaration public static void WriteLine(FileInfo fileInfo, string value) Parameters Type Name Description System.IO.FileInfo fileInfo The FileInfo instance to write the value to System.String value The string value to write"
  },
  "api/PowerPlug.FileUtils.html": {
    "href": "api/PowerPlug.FileUtils.html",
    "title": "Namespace PowerPlug.FileUtils",
    "keywords": "Namespace PowerPlug.FileUtils Classes FileUtils A static class for File utility functions PowerPlugFileBase The base class for any PowerPlug file abstraction. Representations of PowerShell entities such as a user's profile should inherit this class for abstraction. Profile An abstracted representation of the location of a user's PowerShell $PROFILE path"
  },
  "api/PowerPlug.FileUtils.PowerPlugFileBase.html": {
    "href": "api/PowerPlug.FileUtils.PowerPlugFileBase.html",
    "title": "Class PowerPlugFileBase",
    "keywords": "Class PowerPlugFileBase The base class for any PowerPlug file abstraction. Representations of PowerShell entities such as a user's profile should inherit this class for abstraction. Inheritance System.Object PowerPlugFileBase Profile Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : PowerPlug.FileUtils Assembly : PowerPlug.dll Syntax public abstract class PowerPlugFileBase Constructors | Improve this Doc View Source PowerPlugFileBase(FileInfo) Sets initial variables given a FileInfo Declaration protected PowerPlugFileBase(FileInfo fileInfo) Parameters Type Name Description System.IO.FileInfo fileInfo The FileInfo instance in order to create a PowerPlug file | Improve this Doc View Source PowerPlugFileBase(String) Sets initial variables given a pathname Declaration protected PowerPlugFileBase(string path) Parameters Type Name Description System.String path The pathname in order to create a PowerPlug file Properties | Improve this Doc View Source FileInfo The FileInfo of the path provided Declaration public FileInfo FileInfo { get; } Property Value Type Description System.IO.FileInfo | Improve this Doc View Source FileParentDir The DirectoryInfo of the parent folder of the path provided Declaration public DirectoryInfo FileParentDir { get; } Property Value Type Description System.IO.DirectoryInfo"
  },
  "api/PowerPlug.FileUtils.Profile.html": {
    "href": "api/PowerPlug.FileUtils.Profile.html",
    "title": "Class Profile",
    "keywords": "Class Profile An abstracted representation of the location of a user's PowerShell $PROFILE path Inheritance System.Object PowerPlugFileBase Profile Inherited Members PowerPlugFileBase.FileInfo PowerPlugFileBase.FileParentDir System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : PowerPlug.FileUtils Assembly : PowerPlug.dll Syntax public class Profile : PowerPlugFileBase Constructors | Improve this Doc View Source Profile(FileInfo) Sets initial variables given a FileInfo Declaration public Profile(FileInfo fileInfo) Parameters Type Name Description System.IO.FileInfo fileInfo The FileInfo instance in order to create a PowerPlug file | Improve this Doc View Source Profile(String) Sets initial variables given a pathname Declaration public Profile(string path) Parameters Type Name Description System.String path The pathname in order to create a PowerPlug file Methods | Improve this Doc View Source GetProfile() Return's a new Profile object containing information about the user's $PROFILE path Declaration public static Profile GetProfile() Returns Type Description Profile Exceptions Type Condition System.Management.Automation.SessionStateException A SessionStateException is thrown if the user's $PROFILE cannot be found | Improve this Doc View Source ProfileExists() Runs a PowerShell script to check if the user's $PROFILE path exists. The command run internally is Test-Path $PROFILE Declaration public static bool ProfileExists() Returns Type Description System.Boolean"
  },
  "api/PowerPlug.MathUtils.html": {
    "href": "api/PowerPlug.MathUtils.html",
    "title": "Namespace PowerPlug.MathUtils",
    "keywords": "Namespace PowerPlug.MathUtils Classes Matrix A class representing a mathematical Matrix. Creates a rectangular array of rows and columns with numbers as elements. The Matrix class includes mathematical matrix operations to manipulate it. MatrixPropertyException An exception that occurs if a Matrix property is violated when examining certain properties at runtime. Interfaces IMatrixer<T> Represents the minimum requirements to create a Matrix."
  },
  "api/PowerPlug.MathUtils.IMatrixer-1.html": {
    "href": "api/PowerPlug.MathUtils.IMatrixer-1.html",
    "title": "Interface IMatrixer<T>",
    "keywords": "Interface IMatrixer<T> Represents the minimum requirements to create a Matrix. Inherited Members System.Collections.Generic.IEnumerable<T>.GetEnumerator() Namespace : PowerPlug.MathUtils Assembly : PowerPlug.dll Syntax public interface IMatrixer<out T> : IEnumerable<T>, IEnumerable Type Parameters Name Description T The element type of this Matrix Properties | Improve this Doc View Source Cols Property for the number of columns in an IMatrixer Declaration int Cols { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Rows Property for the number of Rows in and IMatrixer Declaration int Rows { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source ToString() Returns a string representation of an IMatrixer Declaration string ToString() Returns Type Description System.String Extension Methods EnumerableUtils.IsNullOrEmpty<T>(IEnumerable<T>) EnumerableUtils.Shuffle<T>(IEnumerable<T>) EnumerableUtils.ToString<T>(IEnumerable<T>, String, Boolean) EnumerableStats.Mean<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.Median<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.Mode<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.SampleVariance<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.PopulationVariance<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.SampleStandardDeviation<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.PopulationStandardDeviation<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.Range<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.LowerQuartile<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.UpperQuartile<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.InterQuartileRange<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.IsNormalProportion<T>(IEnumerable<T>, Func<T, Double>, Double) EnumerableStats.IsNormalMean<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.StandardizedScore<T>(IEnumerable<T>, Func<T, Double>, Double)"
  },
  "api/PowerPlug.MathUtils.Matrix.html": {
    "href": "api/PowerPlug.MathUtils.Matrix.html",
    "title": "Class Matrix",
    "keywords": "Class Matrix A class representing a mathematical Matrix. Creates a rectangular array of rows and columns with numbers as elements. The Matrix class includes mathematical matrix operations to manipulate it. Inheritance System.Object Matrix Implements IMatrixer < System.Double > System.Collections.Generic.IEnumerable < System.Double > System.Collections.IEnumerable IIndexableDouble < System.Int32 , System.Double > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : PowerPlug.MathUtils Assembly : PowerPlug.dll Syntax public class Matrix : IMatrixer<double>, IEnumerable<double>, IEnumerable, IIndexableDouble<int, double> Constructors | Improve this Doc View Source Matrix(Double[,]) Creates an instance of a Matrix given a 2D array. Declaration public Matrix(double[, ] matrix) Parameters Type Name Description System.Double [,] matrix A 2D array of doubles | Improve this Doc View Source Matrix(Int32, Int32) Creates an instance of a Matrix given rows and columns. Declaration public Matrix(int rows, int cols) Parameters Type Name Description System.Int32 rows The number of rows in this Matrix System.Int32 cols The number of columns in this Matrix Properties | Improve this Doc View Source Cols Declaration public int Cols { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Item[Int32, Int32] Declaration public double this[int row, int col] { get; set; } Parameters Type Name Description System.Int32 row System.Int32 col Property Value Type Description System.Double | Improve this Doc View Source Rows Declaration public int Rows { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Add(Matrix, Matrix) Declaration public static Matrix Add(Matrix left, Matrix right) Parameters Type Name Description Matrix left Matrix right Returns Type Description Matrix | Improve this Doc View Source Add(Matrix, Double) Declaration public static Matrix Add(Matrix left, double scalar) Parameters Type Name Description Matrix left System.Double scalar Returns Type Description Matrix | Improve this Doc View Source Divide(Matrix, Double) Declaration public static Matrix Divide(Matrix left, double scalar) Parameters Type Name Description Matrix left System.Double scalar Returns Type Description Matrix | Improve this Doc View Source DotProduct(Matrix, Matrix) Declaration public static Matrix DotProduct(Matrix left, Matrix right) Parameters Type Name Description Matrix left Matrix right Returns Type Description Matrix | Improve this Doc View Source EqualDimension(Matrix, Matrix) Declaration public static bool EqualDimension(Matrix one, Matrix two) Parameters Type Name Description Matrix one Matrix two Returns Type Description System.Boolean | Improve this Doc View Source Equals(Matrix) Declaration protected bool Equals(Matrix other) Parameters Type Name Description Matrix other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<double> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < System.Double > | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source IsColumnVector() Declaration public bool IsColumnVector() Returns Type Description System.Boolean | Improve this Doc View Source IsRowVector() Declaration public bool IsRowVector() Returns Type Description System.Boolean | Improve this Doc View Source IsSquareVector() Declaration public bool IsSquareVector() Returns Type Description System.Boolean | Improve this Doc View Source Mod(Matrix, Double) Declaration public static Matrix Mod(Matrix left, double scalar) Parameters Type Name Description Matrix left System.Double scalar Returns Type Description Matrix | Improve this Doc View Source Multiply(Matrix, Double) Declaration public static Matrix Multiply(Matrix left, double scalar) Parameters Type Name Description Matrix left System.Double scalar Returns Type Description Matrix | Improve this Doc View Source Negate(Matrix) Declaration public static Matrix Negate(Matrix m) Parameters Type Name Description Matrix m Returns Type Description Matrix | Improve this Doc View Source Subtract(Matrix, Matrix) Declaration public static Matrix Subtract(Matrix left, Matrix right) Parameters Type Name Description Matrix left Matrix right Returns Type Description Matrix | Improve this Doc View Source Subtract(Matrix, Double) Declaration public static Matrix Subtract(Matrix left, double scalar) Parameters Type Name Description Matrix left System.Double scalar Returns Type Description Matrix | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() | Improve this Doc View Source Transpose() Declaration public Matrix Transpose() Returns Type Description Matrix Operators | Improve this Doc View Source Addition(Matrix, Matrix) Declaration public static Matrix operator +(Matrix one, Matrix two) Parameters Type Name Description Matrix one Matrix two Returns Type Description Matrix | Improve this Doc View Source Addition(Matrix, Double) Declaration public static Matrix operator +(Matrix m, double scalar) Parameters Type Name Description Matrix m System.Double scalar Returns Type Description Matrix | Improve this Doc View Source Addition(Double, Matrix) Declaration public static Matrix operator +(double scalar, Matrix m) Parameters Type Name Description System.Double scalar Matrix m Returns Type Description Matrix | Improve this Doc View Source Division(Matrix, Double) Declaration public static Matrix operator /(Matrix m, double scalar) Parameters Type Name Description Matrix m System.Double scalar Returns Type Description Matrix | Improve this Doc View Source Division(Double, Matrix) Declaration public static Matrix operator /(double scalar, Matrix m) Parameters Type Name Description System.Double scalar Matrix m Returns Type Description Matrix | Improve this Doc View Source Equality(Matrix, Matrix) Declaration public static bool operator ==(Matrix one, Matrix two) Parameters Type Name Description Matrix one Matrix two Returns Type Description System.Boolean | Improve this Doc View Source Inequality(Matrix, Matrix) Declaration public static bool operator !=(Matrix one, Matrix two) Parameters Type Name Description Matrix one Matrix two Returns Type Description System.Boolean | Improve this Doc View Source LogicalNot(Matrix) Declaration public static Matrix operator !(Matrix m) Parameters Type Name Description Matrix m Returns Type Description Matrix | Improve this Doc View Source Modulus(Matrix, Double) Declaration public static Matrix operator %(Matrix m, double scalar) Parameters Type Name Description Matrix m System.Double scalar Returns Type Description Matrix | Improve this Doc View Source Modulus(Double, Matrix) Declaration public static Matrix operator %(double scalar, Matrix m) Parameters Type Name Description System.Double scalar Matrix m Returns Type Description Matrix | Improve this Doc View Source Multiply(Matrix, Matrix) Declaration public static Matrix operator *(Matrix one, Matrix two) Parameters Type Name Description Matrix one Matrix two Returns Type Description Matrix | Improve this Doc View Source Multiply(Matrix, Double) Declaration public static Matrix operator *(Matrix m, double scalar) Parameters Type Name Description Matrix m System.Double scalar Returns Type Description Matrix | Improve this Doc View Source Multiply(Double, Matrix) Declaration public static Matrix operator *(double scalar, Matrix m) Parameters Type Name Description System.Double scalar Matrix m Returns Type Description Matrix | Improve this Doc View Source Subtraction(Matrix, Matrix) Declaration public static Matrix operator -(Matrix one, Matrix two) Parameters Type Name Description Matrix one Matrix two Returns Type Description Matrix | Improve this Doc View Source Subtraction(Matrix, Double) Declaration public static Matrix operator -(Matrix m, double scalar) Parameters Type Name Description Matrix m System.Double scalar Returns Type Description Matrix | Improve this Doc View Source Subtraction(Double, Matrix) Declaration public static Matrix operator -(double scalar, Matrix m) Parameters Type Name Description System.Double scalar Matrix m Returns Type Description Matrix Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements IMatrixer<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable IIndexableDouble<TKey, TVal> Extension Methods EnumerableUtils.IsNullOrEmpty<T>(IEnumerable<T>) EnumerableUtils.Shuffle<T>(IEnumerable<T>) EnumerableUtils.ToString<T>(IEnumerable<T>, String, Boolean) EnumerableStats.Mean<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.Median<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.Mode(IEnumerable<Double>) EnumerableStats.Mode<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.SampleVariance(IEnumerable<Double>) EnumerableStats.SampleVariance<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.PopulationVariance(IEnumerable<Double>) EnumerableStats.PopulationVariance<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.SampleStandardDeviation(IEnumerable<Double>) EnumerableStats.SampleStandardDeviation<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.PopulationStandardDeviation(IEnumerable<Double>) EnumerableStats.PopulationStandardDeviation<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.Range(IEnumerable<Double>) EnumerableStats.Range<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.LowerQuartile(IEnumerable<Double>) EnumerableStats.LowerQuartile<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.UpperQuartile(IEnumerable<Double>) EnumerableStats.UpperQuartile<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.InterQuartileRange(IEnumerable<Double>) EnumerableStats.InterQuartileRange<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.IsNormalProportion(IEnumerable<Double>, Double) EnumerableStats.IsNormalProportion<T>(IEnumerable<T>, Func<T, Double>, Double) EnumerableStats.IsNormalMean(IEnumerable<Double>) EnumerableStats.IsNormalMean<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.StandardizedScore(IEnumerable<Double>, Double) EnumerableStats.StandardizedScore<T>(IEnumerable<T>, Func<T, Double>, Double)"
  },
  "api/PowerPlug.MathUtils.MatrixPropertyException.html": {
    "href": "api/PowerPlug.MathUtils.MatrixPropertyException.html",
    "title": "Class MatrixPropertyException",
    "keywords": "Class MatrixPropertyException An exception that occurs if a Matrix property is violated when examining certain properties at runtime. Inheritance System.Object System.Exception MatrixPropertyException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : PowerPlug.MathUtils Assembly : PowerPlug.dll Syntax [Serializable] public class MatrixPropertyException : Exception, ISerializable Constructors | Improve this Doc View Source MatrixPropertyException() Declaration public MatrixPropertyException() | Improve this Doc View Source MatrixPropertyException(SerializationInfo, StreamingContext) Declaration protected MatrixPropertyException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info System.Runtime.Serialization.StreamingContext context | Improve this Doc View Source MatrixPropertyException(String) Declaration public MatrixPropertyException(string message) Parameters Type Name Description System.String message | Improve this Doc View Source MatrixPropertyException(String, Exception) Declaration public MatrixPropertyException(string message, Exception inner) Parameters Type Name Description System.String message System.Exception inner Implements System.Runtime.Serialization.ISerializable"
  },
  "api/PowerPlug.Statistics.EnumerableStats.html": {
    "href": "api/PowerPlug.Statistics.EnumerableStats.html",
    "title": "Class EnumerableStats",
    "keywords": "Class EnumerableStats A static utility class for calculating a variety of statistics based on IEnumerables. Moreover, generic overload methods exist to simplify calculating statistics of object enumerables containing numeric properties. Inheritance System.Object EnumerableStats Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : PowerPlug.Statistics Assembly : PowerPlug.dll Syntax public static class EnumerableStats Methods | Improve this Doc View Source ConstructTValue(Double, Double, Double, Double) Returns whether if the data set is normally distributed for a mean. Declaration public static double ConstructTValue(double mean, double popMean, double stdDev, double size) Parameters Type Name Description System.Double mean The mean of the data set System.Double popMean The population mean System.Double stdDev The standard deviation of the data set System.Double size The size of the data set Returns Type Description System.Double Constructs the t-critical value | Improve this Doc View Source CreateConfidenceInterval(Double, Double, Double) Creates confidence interval for the given data set. Declaration public static IEnumerable<double> CreateConfidenceInterval(double mean, double cv, double se) Parameters Type Name Description System.Double mean The mean of the data set System.Double cv The critical value of the data set System.Double se The standard error of the data set Returns Type Description System.Collections.Generic.IEnumerable < System.Double > Returns a confidence interval of the data set. | Improve this Doc View Source InterQuartileRange(IEnumerable<Double>) Finds the inter-quartile range of the enumerable. Declaration public static double InterQuartileRange(this IEnumerable<double> src) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Double > src The IEnumerable of type double Returns Type Description System.Double The inter-quartile range of the source Exceptions Type Condition System.ArgumentNullException Thrown when the source is null System.InvalidOperationException Thrown when the source is of length 0 | Improve this Doc View Source InterQuartileRange<T>(IEnumerable<T>, Func<T, Double>) A generic overload of the InterQuartileRange(IEnumerable<Double>) method. This method will call the InterQuartileRange(IEnumerable<Double>) overload. Declaration public static double InterQuartileRange<T>(this IEnumerable<T> numbers, Func<T, double> selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> numbers The specified enumerable System.Func <T, System.Double > selector The numeral specifier Returns Type Description System.Double The inter-quartile range of the source Type Parameters Name Description T The type of the enumerable | Improve this Doc View Source IsNormalMean(IEnumerable<Double>) Returns whether if the data set is normally distributed for a mean. Declaration public static bool IsNormalMean(this IEnumerable<double> src) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Double > src The IEnumerable of type double Returns Type Description System.Boolean Returns whether if the data set is normally distributed for a mean. Exceptions Type Condition System.ArgumentNullException Thrown when the source is null System.InvalidOperationException Thrown when the source is of length 0 | Improve this Doc View Source IsNormalMean<T>(IEnumerable<T>, Func<T, Double>) A generic overload of the IsNormalMean(IEnumerable<Double>) method. This method will call the IsNormalMean(IEnumerable<Double>) overload. Declaration public static bool IsNormalMean<T>(this IEnumerable<T> numbers, Func<T, double> selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> numbers The specified enumerable System.Func <T, System.Double > selector The numeral specifier Returns Type Description System.Boolean Returns if the data set is normally distributed for a proportion. Type Parameters Name Description T The type of the enumerable | Improve this Doc View Source IsNormalProportion(IEnumerable<Double>, Double) Returns whether if the data set is normally distributed for a proportion. Declaration public static bool IsNormalProportion(this IEnumerable<double> src, double samstat) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Double > src The IEnumerable of type double System.Double samstat The sample statistic Returns Type Description System.Boolean Returns if the data set is normally distributed for a proportion. Exceptions Type Condition System.ArgumentNullException Thrown when the source is null System.InvalidOperationException Thrown when the source is of length 0 | Improve this Doc View Source IsNormalProportion<T>(IEnumerable<T>, Func<T, Double>, Double) A generic overload of the IsNormalProportion(IEnumerable<Double>, Double) method. This method will call the IsNormalProportion(IEnumerable<Double>, Double) overload. Declaration public static bool IsNormalProportion<T>(this IEnumerable<T> numbers, Func<T, double> selector, double samstat) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> numbers The specified enumerable System.Func <T, System.Double > selector The numeral specifier System.Double samstat The sample statistic> Returns Type Description System.Boolean Returns if the data set is normally distributed for a proportion. Type Parameters Name Description T The type of the enumerable | Improve this Doc View Source LowerQuartile(IEnumerable<Double>) Finds the lower quartile of the enumerable. Declaration public static double LowerQuartile(this IEnumerable<double> src) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Double > src The IEnumberable of type double Returns Type Description System.Double The lower quartile of the source Exceptions Type Condition System.ArgumentNullException Thrown when the source is null System.InvalidOperationException Thrown when the source is of size 0 InsufficientDataSetException Thrown when the data set is not large enough to calculate a lower quartile | Improve this Doc View Source LowerQuartile<T>(IEnumerable<T>, Func<T, Double>) A generic overload of the LowerQuartile(IEnumerable<Double>) method. This method will call the LowerQuartile(IEnumerable<Double>) overload. Declaration public static double LowerQuartile<T>(this IEnumerable<T> numbers, Func<T, double> selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> numbers The specified enumerable System.Func <T, System.Double > selector The numeral specifier Returns Type Description System.Double The lower quartile of the source Type Parameters Name Description T The type of the enumerable | Improve this Doc View Source Mean<T>(IEnumerable<T>, Func<T, Double>) A generic overload of the PowerPlug.Statistics.EnumerableStats.Mean(System.Collections.Generic.IEnumerable{System.Double}) method. This method will call the PowerPlug.Statistics.EnumerableStats.Mean(System.Collections.Generic.IEnumerable{System.Double}) overload. Declaration public static double Mean<T>(this IEnumerable<T> numbers, Func<T, double> selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> numbers The specified enumerable System.Func <T, System.Double > selector The numeral specifier Returns Type Description System.Double The average of all the elements in the source Type Parameters Name Description T The type of the enumerable | Improve this Doc View Source Median<T>(IEnumerable<T>, Func<T, Double>) A generic overload of the PowerPlug.Statistics.EnumerableStats.Median(System.Collections.Generic.IEnumerable{System.Double}) method. This method will call the PowerPlug.Statistics.EnumerableStats.Median(System.Collections.Generic.IEnumerable{System.Double}) overload. Declaration public static double Median<T>(this IEnumerable<T> numbers, Func<T, double> selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> numbers The specified enumerable System.Func <T, System.Double > selector The numeral specifier Returns Type Description System.Double The median of the source Type Parameters Name Description T The type of the enumerable | Improve this Doc View Source Mode(IEnumerable<Double>) Finds the mode of all the elements in the enumerable. Declaration public static double Mode(this IEnumerable<double> src) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Double > src The IEnumerable of type double Returns Type Description System.Double The mode of the source Exceptions Type Condition System.ArgumentNullException Thrown when the source is null System.InvalidOperationException Thrown when the source is of length 0 NoModeException Thrown when no mode exists for the source | Improve this Doc View Source Mode<T>(IEnumerable<T>, Func<T, Double>) A generic overload of the Mode(IEnumerable<Double>) method. This method will call the Mode(IEnumerable<Double>) overload. Declaration public static double Mode<T>(this IEnumerable<T> numbers, Func<T, double> selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> numbers The specified enumerable System.Func <T, System.Double > selector The numeral specifier Returns Type Description System.Double The mode of the source Type Parameters Name Description T The type of the enumerable | Improve this Doc View Source PopulationStandardDeviation(IEnumerable<Double>) Finds the population standard deviation of the enumerable. Declaration public static double PopulationStandardDeviation(this IEnumerable<double> src) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Double > src The IEnumerable of type double Returns Type Description System.Double The population standard deviation of the source Exceptions Type Condition System.ArgumentNullException Thrown when the source is null System.InvalidOperationException Thrown when the source is of length 0 | Improve this Doc View Source PopulationStandardDeviation<T>(IEnumerable<T>, Func<T, Double>) A generic overload of the PopulationStandardDeviation(IEnumerable<Double>) method. This method will call the PopulationStandardDeviation(IEnumerable<Double>) overload. Declaration public static double PopulationStandardDeviation<T>(this IEnumerable<T> numbers, Func<T, double> selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> numbers The specified enumerable System.Func <T, System.Double > selector The numeral specifier Returns Type Description System.Double The population standard deviation of the source Type Parameters Name Description T The type of the enumerable | Improve this Doc View Source PopulationVariance(IEnumerable<Double>) Finds the population variance of the enumerable. Declaration public static double PopulationVariance(this IEnumerable<double> src) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Double > src The IEnumerable of type double Returns Type Description System.Double The population variance of the source Exceptions Type Condition System.ArgumentNullException Thrown when the source is null System.InvalidOperationException Thrown when the source is of length 0 | Improve this Doc View Source PopulationVariance<T>(IEnumerable<T>, Func<T, Double>) A generic overload of the PopulationVariance(IEnumerable<Double>) method. This method will call the PopulationVariance(IEnumerable<Double>) overload. Declaration public static double PopulationVariance<T>(this IEnumerable<T> numbers, Func<T, double> selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> numbers The specified enumerable System.Func <T, System.Double > selector The numeral specifier Returns Type Description System.Double The populationvariance of the source Type Parameters Name Description T The type of the enumerable | Improve this Doc View Source Range(IEnumerable<Double>) Finds the range of the enumerable. Declaration public static double Range(this IEnumerable<double> src) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Double > src The IEnumerable of type double Returns Type Description System.Double The range of the source Exceptions Type Condition System.ArgumentNullException Thrown when the source is null System.InvalidOperationException Thrown when the source is of size 0 | Improve this Doc View Source Range<T>(IEnumerable<T>, Func<T, Double>) A generic overload of the Range(IEnumerable<Double>) method. This method will call the Range(IEnumerable<Double>) overload. Declaration public static double Range<T>(this IEnumerable<T> numbers, Func<T, double> selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> numbers The specified enumerable System.Func <T, System.Double > selector The numeral specifier Returns Type Description System.Double The range of the source Type Parameters Name Description T The type of the enumerable | Improve this Doc View Source SampleStandardDeviation(IEnumerable<Double>) Finds the sample standard deviation of the enumerable. Declaration public static double SampleStandardDeviation(this IEnumerable<double> src) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Double > src The IEnumerable of type double Returns Type Description System.Double The sample standard deviation of the source Exceptions Type Condition System.ArgumentNullException Thrown when the source is null System.InvalidOperationException Thrown when the source is of length 0 | Improve this Doc View Source SampleStandardDeviation<T>(IEnumerable<T>, Func<T, Double>) A generic overload of the SampleStandardDeviation(IEnumerable<Double>) method. This method will call the SampleStandardDeviation(IEnumerable<Double>) overload. Declaration public static double SampleStandardDeviation<T>(this IEnumerable<T> numbers, Func<T, double> selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> numbers The specified enumerable System.Func <T, System.Double > selector The numeral specifier Returns Type Description System.Double The sample standard deviation of the source Type Parameters Name Description T The type of the enumerable | Improve this Doc View Source SampleVariance(IEnumerable<Double>) Finds the sample variance of the enumerable. Declaration public static double SampleVariance(this IEnumerable<double> src) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Double > src The IEnumerable of type double Returns Type Description System.Double The sample variance of the source Exceptions Type Condition System.ArgumentNullException Thrown when the source is null System.InvalidOperationException Thrown when the source if of length 0 | Improve this Doc View Source SampleVariance<T>(IEnumerable<T>, Func<T, Double>) A generic overload of the SampleVariance(IEnumerable<Double>) method. This method will call the SampleVariance(IEnumerable<Double>) overload. Declaration public static double SampleVariance<T>(this IEnumerable<T> numbers, Func<T, double> selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> numbers The specified enumerable System.Func <T, System.Double > selector The numeral specifier Returns Type Description System.Double The sample variance of the source Type Parameters Name Description T The type of the enumerable | Improve this Doc View Source StandardizedScore(IEnumerable<Double>, Double) Calculates the standardized score (z-score or standard score) of the enumerable. Declaration public static double StandardizedScore(this IEnumerable<double> src, double elem) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Double > src The IEnumerable of type double System.Double elem The value of the element Returns Type Description System.Double The standardized score of the source Exceptions Type Condition System.ArgumentNullException Thrown when the source is null System.InvalidOperationException Thrown when the source if of length 0 | Improve this Doc View Source StandardizedScore<T>(IEnumerable<T>, Func<T, Double>, Double) A generic overload of the StandardizedScore(IEnumerable<Double>, Double) method. This method will call the StandardizedScore(IEnumerable<Double>, Double) overload. Declaration public static double StandardizedScore<T>(this IEnumerable<T> numbers, Func<T, double> selector, double elem) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> numbers The specified enumerable System.Func <T, System.Double > selector The numeral specifier System.Double elem The value of the element Returns Type Description System.Double The standardized score of the source Type Parameters Name Description T The type of the enumerable | Improve this Doc View Source UpperQuartile(IEnumerable<Double>) Finds the upper quartile of the enumerable. Declaration public static double UpperQuartile(this IEnumerable<double> src) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Double > src The IEnumerable of type double Returns Type Description System.Double The upper quartile of the source Exceptions Type Condition System.ArgumentNullException Thrown when the source is null System.InvalidOperationException Thrown when the source is of size 0 InsufficientDataSetException Thrown when the data set is not large enough to calculate an upper quartile | Improve this Doc View Source UpperQuartile<T>(IEnumerable<T>, Func<T, Double>) A generic overload of the UpperQuartile(IEnumerable<Double>) method. This method will call the UpperQuartile(IEnumerable<Double>) overload. Declaration public static double UpperQuartile<T>(this IEnumerable<T> numbers, Func<T, double> selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> numbers The specified enumerable System.Func <T, System.Double > selector The numeral specifier Returns Type Description System.Double The upper quartile of the source Type Parameters Name Description T The type of the enumerable"
  },
  "api/PowerPlug.Statistics.html": {
    "href": "api/PowerPlug.Statistics.html",
    "title": "Namespace PowerPlug.Statistics",
    "keywords": "Namespace PowerPlug.Statistics Classes EnumerableStats A static utility class for calculating a variety of statistics based on IEnumerables. Moreover, generic overload methods exist to simplify calculating statistics of object enumerables containing numeric properties. InsufficientDataSetException NoModeException"
  },
  "api/PowerPlug.Statistics.InsufficientDataSetException.html": {
    "href": "api/PowerPlug.Statistics.InsufficientDataSetException.html",
    "title": "Class InsufficientDataSetException",
    "keywords": "Class InsufficientDataSetException Inheritance System.Object System.Exception InsufficientDataSetException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : PowerPlug.Statistics Assembly : PowerPlug.dll Syntax [Serializable] public class InsufficientDataSetException : Exception, ISerializable Constructors | Improve this Doc View Source InsufficientDataSetException() Declaration public InsufficientDataSetException() | Improve this Doc View Source InsufficientDataSetException(SerializationInfo, StreamingContext) Declaration protected InsufficientDataSetException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info System.Runtime.Serialization.StreamingContext context | Improve this Doc View Source InsufficientDataSetException(String) Declaration public InsufficientDataSetException(string message) Parameters Type Name Description System.String message | Improve this Doc View Source InsufficientDataSetException(String, Exception) Declaration public InsufficientDataSetException(string message, Exception inner) Parameters Type Name Description System.String message System.Exception inner Implements System.Runtime.Serialization.ISerializable"
  },
  "api/PowerPlug.Statistics.NoModeException.html": {
    "href": "api/PowerPlug.Statistics.NoModeException.html",
    "title": "Class NoModeException",
    "keywords": "Class NoModeException Inheritance System.Object System.Exception NoModeException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : PowerPlug.Statistics Assembly : PowerPlug.dll Syntax [Serializable] public class NoModeException : Exception, ISerializable Constructors | Improve this Doc View Source NoModeException() Declaration public NoModeException() | Improve this Doc View Source NoModeException(SerializationInfo, StreamingContext) Declaration protected NoModeException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info System.Runtime.Serialization.StreamingContext context | Improve this Doc View Source NoModeException(String) Declaration public NoModeException(string message) Parameters Type Name Description System.String message | Improve this Doc View Source NoModeException(String, Exception) Declaration public NoModeException(string message, Exception inner) Parameters Type Name Description System.String message System.Exception inner Implements System.Runtime.Serialization.ISerializable"
  },
  "api/PowerPlug.StringUtils.html": {
    "href": "api/PowerPlug.StringUtils.html",
    "title": "Namespace PowerPlug.StringUtils",
    "keywords": "Namespace PowerPlug.StringUtils Classes StringUtils"
  },
  "api/PowerPlug.StringUtils.StringUtils.html": {
    "href": "api/PowerPlug.StringUtils.StringUtils.html",
    "title": "Class StringUtils",
    "keywords": "Class StringUtils Inheritance System.Object StringUtils Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : PowerPlug.StringUtils Assembly : PowerPlug.dll Syntax public static class StringUtils Methods | Improve this Doc View Source CharToString(IEnumerable<Char>) Converts a System.Collections.Generic.IEnumerable<T> to a string Declaration public static string CharToString(IEnumerable<char> charEnumerable) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Char > charEnumerable The System.Collections.Generic.IEnumerable<T> Returns Type Description System.String The converted string Exceptions Type Condition System.ArgumentNullException Thrown when charEnumerable is null | Improve this Doc View Source Chomp(String) Creates a string from the first character of the string to the first whitespace. Declaration public static string Chomp(this string str) Parameters Type Name Description System.String str The string to be chomped Returns Type Description System.String The string retaining the first word Exceptions Type Condition System.ArgumentNullException Thrown when str is null | Improve this Doc View Source ChompAfter(String, Int32) Creates a string from the first character of the string to the nth whitespace that is specified. Declaration public static string ChompAfter(this string str, int spaces) Parameters Type Name Description System.String str The string to be chomped System.Int32 spaces The amount of white space to chomp after Returns Type Description System.String The string retaining the chomped word Exceptions Type Condition System.ArgumentNullException Thrown when str is null | Improve this Doc View Source ContainsDigits(String) Checks if a given string contains any digits. Declaration public static bool ContainsDigits(this string str) Parameters Type Name Description System.String str The string to be used Returns Type Description System.Boolean True if the string contains any digits, false otherwise Exceptions Type Condition System.ArgumentNullException Thrown when str is null | Improve this Doc View Source ContainsDuplicateChars(String) Checks whether a string contains duplicate characters. Declaration public static bool ContainsDuplicateChars(this string str) Parameters Type Name Description System.String str The string to be used Returns Type Description System.Boolean True if their are duplicate characters. False, otherwise Exceptions Type Condition System.ArgumentNullException Thrown when str is null | Improve this Doc View Source ContainsDuplicateStrings(String, String) Checks whether a string contains duplicate inner strings. Declaration public static bool ContainsDuplicateStrings(this string str, string arg) Parameters Type Name Description System.String str The string to be used System.String arg The inner string to search for duplicates Returns Type Description System.Boolean True if their are duplicate inner strings. False, otherwise Exceptions Type Condition System.ArgumentNullException Thrown when str is null System.ArgumentNullException Thrown when arg is null | Improve this Doc View Source CountLetters(String, Char) Counts how many times a given letter appears in a string. Declaration public static int CountLetters(this string str, char letter) Parameters Type Name Description System.String str The string to be used System.Char letter The specific letter to search Returns Type Description System.Int32 Exceptions Type Condition System.ArgumentNullException Thrown when str is null | Improve this Doc View Source CountWords(String) Counts the number of words in a string. Declaration public static int CountWords(this string str) Parameters Type Name Description System.String str The string to be used Returns Type Description System.Int32 The number of words in the string Exceptions Type Condition System.ArgumentNullException Thrown when str is null | Improve this Doc View Source IsPalindrome(String, Boolean) Checks if a given string is a palindrome. Declaration public static bool IsPalindrome(this string str, bool ignoreCase = false) Parameters Type Name Description System.String str The string to be used System.Boolean ignoreCase Whether case should be ignored Returns Type Description System.Boolean True if the string is a palindrome Exceptions Type Condition System.ArgumentNullException Thrown when str is null | Improve this Doc View Source IsStrictlyDecreasing(String, Boolean) Checks if each character in a string is lexicographically smaller than the previous character. Declaration public static bool IsStrictlyDecreasing(this string str, bool ignoreCase = false) Parameters Type Name Description System.String str The string to be used System.Boolean ignoreCase Whether case should be ignored Returns Type Description System.Boolean True if the string strictly increases Exceptions Type Condition System.ArgumentNullException Thrown when str is null | Improve this Doc View Source IsStrictlyIncreasing(String, Boolean) Checks if each character in a string is lexicographically greater than the previous character. Declaration public static bool IsStrictlyIncreasing(this string str, bool ignoreCase = false) Parameters Type Name Description System.String str The string to be used System.Boolean ignoreCase Whether case should be ignored Returns Type Description System.Boolean True if the string strictly increases Exceptions Type Condition System.ArgumentNullException Thrown when str is null | Improve this Doc View Source IsSystemDateTime(String, String) Checks if a given string is a valid date used by System.DateTime Declaration public static bool IsSystemDateTime(this string date, string formattingRegex) Parameters Type Name Description System.String date The string to be used System.String formattingRegex The date format regex Returns Type Description System.Boolean True if the string is a valid date recognized by System.DateTime Exceptions Type Condition System.ArgumentNullException Thrown when date is null System.ArgumentNullException Thrown when formattingRegex is null | Improve this Doc View Source IsValidUri(String) Checks if a given string is a valid URI. This checks both HTTP and HTTPS URLs. Declaration public static bool IsValidUri(string uri) Parameters Type Name Description System.String uri The string to be used Returns Type Description System.Boolean True if the URI is valid Exceptions Type Condition System.ArgumentNullException Thrown when uri is null | Improve this Doc View Source IsWellFormed(String) Checks if a string is well formed. A string is well formed if for every alphabet-recognized character, there is an appropriate closing character. For every inner string, with the exception of characters not defined in the alphabet, in between an opening and closing character, if that string were to be split in half, each half would be a mirror image of each other. A well formed string consists of the default alphabet consists of the following characters: '(',')','{','}','[',']','<','>'. Declaration public static bool IsWellFormed(this string str) Parameters Type Name Description System.String str the string to check Returns Type Description System.Boolean whether the string is well formed Examples The following demonstrates how to use the IsWellFormed(String) method. Exceptions Type Condition System.ArgumentNullException Thrown when str is null | Improve this Doc View Source IsWellFormed(String, Dictionary<Char, Char>) Checks if a string is well formed. A string is well formed if for every alphabet-recognized character, there is an appropriate closing character. For every inner string, with the exception of characters not defined in the alphabet, in between an opening and closing character, if that string were to be split in half, each half would be a mirror image of each other. A well formed string consists of the user specified Dictionary of key-value pairs, where the key is the opening character and the value is the closing character. Declaration public static bool IsWellFormed(this string str, Dictionary<char, char> alphabet) Parameters Type Name Description System.String str the string to check System.Collections.Generic.Dictionary < System.Char , System.Char > alphabet the dictionary of key value pairs - where the key represents the opening character and the value represents the closing character Returns Type Description System.Boolean whether the string is well formed Examples The following demonstrates how to use the IsWellFormed(String, Dictionary<Char, Char>) method. Exceptions Type Condition System.ArgumentNullException Thrown when str is null | Improve this Doc View Source LongestCommonPrefix(IEnumerable<String>, Boolean) Finds the longest common prefix of a group of strings of type System.Collections.Generic.IEnumerable<T> Declaration public static string LongestCommonPrefix(this IEnumerable<string> strs, bool ignoreCase = false) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > strs A group of strings to find the common prefix System.Boolean ignoreCase A flag whether to ignore case Returns Type Description System.String The longest common prefix | Improve this Doc View Source OrderByLength(IEnumerable<String>) Orders an enumerable by its length in ascending order (natural order). Declaration public static IEnumerable<string> OrderByLength(this IEnumerable<string> si) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > si the System.Collections.Generic.IEnumerable<T> si Returns Type Description System.Collections.Generic.IEnumerable < System.String > An ordered enumerable Exceptions Type Condition System.ArgumentNullException Thrown when si is null | Improve this Doc View Source RemoveAll(String, Boolean, IEnumerable<Char>[]) Removes all instances of any number of characters from a specified string. Declaration public static string RemoveAll(this string str, bool ignoreCase = false, params IEnumerable<char>[] args) Parameters Type Name Description System.String str The string to be used System.Boolean ignoreCase Whether case should be ignored System.Collections.Generic.IEnumerable < System.Char >[] args The characters which will be removed Returns Type Description System.String The string with all characters in args removed Exceptions Type Condition System.ArgumentNullException Thrown when str is null System.ArgumentNullException Thrown when args is null | Improve this Doc View Source RemoveAll(String, Boolean, IEnumerable<String>[]) Removes all instances of any number of strings from a specified string. Declaration public static string RemoveAll(this string str, bool ignoreCase = false, params IEnumerable<string>[] args) Parameters Type Name Description System.String str The string to be used System.Boolean ignoreCase Whether case should be ignored System.Collections.Generic.IEnumerable < System.String >[] args The characters which will be removed Returns Type Description System.String The string with all characters in args removed Exceptions Type Condition System.ArgumentNullException Thrown when str is null System.ArgumentNullException Thrown when args is null | Improve this Doc View Source ReplaceAt(String, Int32, Char) Replaces a character at a specific index in a string, only once. Declaration public static string ReplaceAt(this string str, int index, char c) Parameters Type Name Description System.String str The string to be used System.Int32 index The index to replace c System.Char c The character to replace Returns Type Description System.String | Improve this Doc View Source Reverse(String) Reverses a string from left to right order while maintaining case sensitivity. Declaration public static string Reverse(this string str) Parameters Type Name Description System.String str The string to be reversed Returns Type Description System.String The reversed string Exceptions Type Condition System.ArgumentNullException Thrown when str is null | Improve this Doc View Source Shuffle(String, Boolean) Shuffle's characters in a string. The methodology used to generate random indices used for shuffling is cryptographically strong. Due to this nature, there is no guarantee that the return string will be entirely different than the original. Declaration public static string Shuffle(this string str, bool preserveSpaces = false) Parameters Type Name Description System.String str The string to be shuffled System.Boolean preserveSpaces Determines whether to shuffle spaces or not Returns Type Description System.String The shuffled string Exceptions Type Condition System.ArgumentNullException Thrown when the str is null | Improve this Doc View Source Substring(String, Int32, Int32) Performs a Substring given a starting and ending index, similar to Java. The operation is performed mathematically as [startIndex, endIndex). Declaration public static string Substring(this string str, int startIndex, int endIndex) Parameters Type Name Description System.String str The given string System.Int32 startIndex The inclusive starting index of str System.Int32 endIndex The exclusive ending index of str Returns Type Description System.String A string that is equivalent to the substring that begins at startIndex in this instance, or Empty if startIndex is equal to the length of this instance."
  },
  "articles/changelog.html": {
    "href": "articles/changelog.html",
    "title": "Changelogs",
    "keywords": "Changelogs Future changelogs between full versions will be here. 0.2.6 Release of PowerPlug Fixed an issue where a Set-Byname would not occur Fixed an issue where Remove-Byname would not remove the alias Fixed an issue where Set-Byname would not replace old aliases with the new one Other internal fixes New Get-Help documentation Improved Performance PowerPlugDocs"
  },
  "articles/releases.html": {
    "href": "articles/releases.html",
    "title": "GitHub Releases",
    "keywords": "GitHub Releases The following list is an up-to-date collection of all releases and descriptions to date. 0.2.7 Release of PowerPlug This release contains a few fixes on PowerShell Help-URI and also fixing the PSD1 script in the module. This is a very minor release and the 0.2.6 release contained more important fixes to refer to . 0.2.6 Release of PowerPlug The first full release of PowerPlug comes with a variety of bug fixes and improvements. Versions 0.2.1-beta, 0.2.2, 0.2.3, 0.2.4, and 0.2.5 were tested internally. Install PowerPlug from the PowerShell Gallery with: Install-Module -Name PowerPlug Features New Get-Help documentation Improved Performance PowerPlugDocs Bug Fixes Fixed an issue where a Set-Byname would not occur Fixed an issue where Remove-Byname would not remove the alias Fixed an issue where Set-Byname would not replace old aliases with the new one Other internal fixes 0.2.1-alpha Release of PowerPlug The second and patch release of PowerPlug is now available on the PowerShell gallery as a prerelease available here: PowerPlug Install PowerPlug to PowerShell with: Install-Module -Name PowerPlug -AllowPrerelease Features New-Byname - for creating a new alias to your Profile across various sessions New-Byname [-Name] <string> [-Value] <string> [-Description <string>] [-Option {None | ReadOnly | Constant | Private | AllScope | Unspecified}] [-PassThru] [-WhatIf] [-Confirm] [-Scope {Global | Local | Private | Numbered scopes | Script}] [-Force] [<CommonParameters>] The underlying structure of the command is the same as New-Alias, however, New-Byname writes to the user's $PROFILE Set-Byname - for setting an alias to your Profile across various sessions Set-Byname [-Name] <string> [-Value] <string> [-Description <string>] [-Option {None | ReadOnly | Constant | Private | AllScope | Unspecified}] [-PassThru] [-WhatIf] [-Confirm] [-Scope {Global | Local | Private | Numbered scopes | Script}] [-Force] [<CommonParameters>] The underlying structure of the command is the same as Set-Alias, however, Set-Byname writes to the user's $PROFILE Remove-Byname - for removing an alias to your Profile across various sessions Remove-Byname [-Name] <string> [-Scope {Global | Local | Private | Numbered scopes | Script}] [-Force] [<CommonParameters>] The underlying structure of the command is the same as Remove-Alias, however, Remove-Byname removes and \"bynames\" from the user's $PROFILE 0.1.0-alpha Release of PowerPlug The initial release of PowerPlug is now available. Import the PowerPlug dll to PowerShell with: ipmo \"path/to/PowerPlug.dll\" Features Move-Trash - Moves a file or directory to the Recycle Bin instead of erasing it off the system. Move-Trash [-Path] <string> [[-List]] [<CommonParameters>] Compare-Hash - Compares a file hash with a known signature and displays whether the signature was a match Compare-Hash [-Hash] {SHA256 | SHA512 | MD5} [-Path] <string> [-Signature] <string> [<CommonParameters>]"
  },
  "index.html": {
    "href": "index.html",
    "title": "PowerPlug Docs",
    "keywords": "PowerPlug Docs PowerPlug is a PowerShell 7 cmdlet library. The main mission of PowerPlug is to make PowerShell development faster and eaiser. PowerPlug is run through C# PSCmdlet classes from the PowerShell Standard Library. The site is useful for version changelogs, latest releases, and cmdlet documentation. Execution Install from PS Gallery The latest release can be found at PowerPlug Releases . You can install the prerelease to PowerShell by running: Install-Module -Name PowerPlug Install from GitHub Releases The latest zip release can be found under the GitHub Releases Page . You can use the PowerPlug.dll binary and place it within any other directory, but conventionally in $env:PSModulePath . Importing into session To import the dll for the session, you can run: ipmo PowerPlug or Import-Module PowerPlug . You can use the previous commands within the $PROFILE to load the library on PowerShell startup. Run Get-Module PowerPlug to confirm the import ran successfully. Contributing We are actively looking for contributors to work on all aspects of the code base ― from documentation to C# Cmdlet utilities. For more information onn how to contribute, view our CONTRIBUTING.md Building PowerPlug Prerequisites: PowerShell 7.0 or Later Visual Studio 2017 or Later OR VSCode .NET 5 The default language setting for this project is C# 9.0. The project can be built using dotnet build and the output will display the AssemblyPath . PowerShell 7 can be set as the startup item on Visual Studio to dynamically debug PowerPlug. Documentation There are three components to PowerPlug documentation: Assembly Documentation PowerShell Help File Documentation Miscellaneous Documentation (README.md, Wiki's, Discussions, etc...) All PowerPlug methods are documented using .NET XML documentation. This is compiled using DocFX with the docfx.json file under the DocFX folder . DocFX creates static HTML pages which are used by https://powerplug.me . THe PowerPlug.dll-Help.xml file is the MAML file that is used to generate the Get-Help documentation for PowerPlug cmdlets. Lastly, as a fluid repository, many files change and constantly need to be documented and updated. Roadmap There are two planned releases - the latest being by July 2021 : 0.2.6 - First full release of PowerPlug 0.3.0 - Full release with a statistics cmdlets in its own library, comprehensive documentation in the code-base and PowerShell, robust cmdlets State PowerPlug is a very fluid project and you may encounter issues during execution, especially for preleases. To report an issue visit, PowerPlug Issues , or to contribute, view the contribution guidelines. Licensing PowerPlug is licensed under the GNU General Public License v3.0 . The GNU General Public License is a free, copyleft license for software and other kinds of works. Acknowledgements Thanks especially to my fellow friends and contributors Sam Yuen Lok Kwong"
  }
}