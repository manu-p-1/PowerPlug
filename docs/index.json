{
  "api/index.html": {
    "href": "api/index.html",
    "title": "PLACEHOLDER",
    "keywords": "PLACEHOLDER TODO: Add .NET projects to the src folder and run docfx to generate REAL API Documentation !"
  },
  "api/PowerPlug.BaseCmdlets.BynameBase.html": {
    "href": "api/PowerPlug.BaseCmdlets.BynameBase.html",
    "title": "Class BynameBase",
    "keywords": "Class BynameBase Represents the base structure of a Byname. All Byname cmdlet's stem from PSCmdlet. Inheritance System.Object System.Management.Automation.Internal.InternalCommand System.Management.Automation.Cmdlet System.Management.Automation.PSCmdlet BynameBase WritableByname RemoveBynameCmdlet Inherited Members System.Management.Automation.PSCmdlet.CurrentProviderLocation(System.String) System.Management.Automation.PSCmdlet.GetResolvedProviderPathFromPSPath(System.String, System.Management.Automation.ProviderInfo) System.Management.Automation.PSCmdlet.GetUnresolvedProviderPathFromPSPath(System.String) System.Management.Automation.PSCmdlet.GetVariableValue(System.String) System.Management.Automation.PSCmdlet.GetVariableValue(System.String, System.Object) System.Management.Automation.PSCmdlet.Events System.Management.Automation.PSCmdlet.Host System.Management.Automation.PSCmdlet.InvokeCommand System.Management.Automation.PSCmdlet.InvokeProvider System.Management.Automation.PSCmdlet.JobManager System.Management.Automation.PSCmdlet.JobRepository System.Management.Automation.PSCmdlet.MyInvocation System.Management.Automation.PSCmdlet.PagingParameters System.Management.Automation.PSCmdlet.ParameterSetName System.Management.Automation.PSCmdlet.SessionState System.Management.Automation.Cmdlet.BeginProcessing() System.Management.Automation.Cmdlet.EndProcessing() System.Management.Automation.Cmdlet.GetResourceString(System.String, System.String) System.Management.Automation.Cmdlet.Invoke() System.Management.Automation.Cmdlet.Invoke<T>() System.Management.Automation.Cmdlet.ProcessRecord() System.Management.Automation.Cmdlet.ShouldContinue(System.String, System.String, System.Boolean, System.Boolean, System.Boolean) System.Management.Automation.Cmdlet.ShouldContinue(System.String, System.String, System.Boolean, System.Boolean) System.Management.Automation.Cmdlet.ShouldContinue(System.String, System.String) System.Management.Automation.Cmdlet.ShouldProcess(System.String, System.String, System.String, System.Management.Automation.ShouldProcessReason) System.Management.Automation.Cmdlet.ShouldProcess(System.String) System.Management.Automation.Cmdlet.ShouldProcess(System.String, System.String) System.Management.Automation.Cmdlet.ShouldProcess(System.String, System.String, System.String) System.Management.Automation.Cmdlet.StopProcessing() System.Management.Automation.Cmdlet.ThrowTerminatingError(System.Management.Automation.ErrorRecord) System.Management.Automation.Cmdlet.TransactionAvailable() System.Management.Automation.Cmdlet.WriteCommandDetail(System.String) System.Management.Automation.Cmdlet.WriteDebug(System.String) System.Management.Automation.Cmdlet.WriteError(System.Management.Automation.ErrorRecord) System.Management.Automation.Cmdlet.WriteInformation(System.Object, System.String[]) System.Management.Automation.Cmdlet.WriteInformation(System.Management.Automation.InformationRecord) System.Management.Automation.Cmdlet.WriteObject(System.Object, System.Boolean) System.Management.Automation.Cmdlet.WriteObject(System.Object) System.Management.Automation.Cmdlet.WriteProgress(System.Management.Automation.ProgressRecord) System.Management.Automation.Cmdlet.WriteVerbose(System.String) System.Management.Automation.Cmdlet.WriteWarning(System.String) System.Management.Automation.Cmdlet.CommandRuntime System.Management.Automation.Cmdlet.CommonParameters System.Management.Automation.Cmdlet.OptionalCommonParameters System.Management.Automation.Cmdlet.Stopping System.Management.Automation.Internal.InternalCommand.CommandOrigin System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : PowerPlug.BaseCmdlets Assembly : PowerPlug.dll Syntax public abstract class BynameBase : PSCmdlet Properties | Improve this Doc View Source Name The Name Property of the Byname. Every Byname contains a Name property, regardless of creating a new Byname, setting an existing Byname, or removing a Byname. Declaration public abstract string Name { get; set; } Property Value Type Description System.String"
  },
  "api/PowerPlug.BaseCmdlets.html": {
    "href": "api/PowerPlug.BaseCmdlets.html",
    "title": "Namespace PowerPlug.BaseCmdlets",
    "keywords": "Namespace PowerPlug.BaseCmdlets Classes BynameBase Represents the base structure of a Byname. All Byname cmdlet's stem from PSCmdlet. WritableByname Represents a Byname that can be written or modified to the user's $PROFILE."
  },
  "api/PowerPlug.BaseCmdlets.WritableByname.html": {
    "href": "api/PowerPlug.BaseCmdlets.WritableByname.html",
    "title": "Class WritableByname",
    "keywords": "Class WritableByname Represents a Byname that can be written or modified to the user's $PROFILE. Inheritance System.Object System.Management.Automation.Internal.InternalCommand System.Management.Automation.Cmdlet System.Management.Automation.PSCmdlet BynameBase WritableByname NewBynameCmdlet SetBynameCmdlet Inherited Members System.Management.Automation.PSCmdlet.CurrentProviderLocation(System.String) System.Management.Automation.PSCmdlet.GetResolvedProviderPathFromPSPath(System.String, System.Management.Automation.ProviderInfo) System.Management.Automation.PSCmdlet.GetUnresolvedProviderPathFromPSPath(System.String) System.Management.Automation.PSCmdlet.GetVariableValue(System.String) System.Management.Automation.PSCmdlet.GetVariableValue(System.String, System.Object) System.Management.Automation.PSCmdlet.Events System.Management.Automation.PSCmdlet.Host System.Management.Automation.PSCmdlet.InvokeCommand System.Management.Automation.PSCmdlet.InvokeProvider System.Management.Automation.PSCmdlet.JobManager System.Management.Automation.PSCmdlet.JobRepository System.Management.Automation.PSCmdlet.MyInvocation System.Management.Automation.PSCmdlet.PagingParameters System.Management.Automation.PSCmdlet.ParameterSetName System.Management.Automation.PSCmdlet.SessionState System.Management.Automation.Cmdlet.BeginProcessing() System.Management.Automation.Cmdlet.EndProcessing() System.Management.Automation.Cmdlet.GetResourceString(System.String, System.String) System.Management.Automation.Cmdlet.Invoke() System.Management.Automation.Cmdlet.Invoke<T>() System.Management.Automation.Cmdlet.ProcessRecord() System.Management.Automation.Cmdlet.ShouldContinue(System.String, System.String, System.Boolean, System.Boolean, System.Boolean) System.Management.Automation.Cmdlet.ShouldContinue(System.String, System.String, System.Boolean, System.Boolean) System.Management.Automation.Cmdlet.ShouldContinue(System.String, System.String) System.Management.Automation.Cmdlet.ShouldProcess(System.String, System.String, System.String, System.Management.Automation.ShouldProcessReason) System.Management.Automation.Cmdlet.ShouldProcess(System.String) System.Management.Automation.Cmdlet.ShouldProcess(System.String, System.String) System.Management.Automation.Cmdlet.ShouldProcess(System.String, System.String, System.String) System.Management.Automation.Cmdlet.StopProcessing() System.Management.Automation.Cmdlet.ThrowTerminatingError(System.Management.Automation.ErrorRecord) System.Management.Automation.Cmdlet.TransactionAvailable() System.Management.Automation.Cmdlet.WriteCommandDetail(System.String) System.Management.Automation.Cmdlet.WriteDebug(System.String) System.Management.Automation.Cmdlet.WriteError(System.Management.Automation.ErrorRecord) System.Management.Automation.Cmdlet.WriteInformation(System.Object, System.String[]) System.Management.Automation.Cmdlet.WriteInformation(System.Management.Automation.InformationRecord) System.Management.Automation.Cmdlet.WriteObject(System.Object, System.Boolean) System.Management.Automation.Cmdlet.WriteObject(System.Object) System.Management.Automation.Cmdlet.WriteProgress(System.Management.Automation.ProgressRecord) System.Management.Automation.Cmdlet.WriteVerbose(System.String) System.Management.Automation.Cmdlet.WriteWarning(System.String) System.Management.Automation.Cmdlet.CommandRuntime System.Management.Automation.Cmdlet.CommonParameters System.Management.Automation.Cmdlet.OptionalCommonParameters System.Management.Automation.Cmdlet.Stopping System.Management.Automation.Internal.InternalCommand.CommandOrigin System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : PowerPlug.BaseCmdlets Assembly : PowerPlug.dll Syntax public abstract class WritableByname : BynameBase Properties | Improve this Doc View Source Confirm Displays a confirmation dialog to require user input to execute the command. Declaration [Parameter] public SwitchParameter Confirm { get; set; } Property Value Type Description System.Management.Automation.SwitchParameter | Improve this Doc View Source Description The description for the alias. Declaration [Parameter] public string Description { get; set; } Property Value Type Description System.String | Improve this Doc View Source Force If set to true and an existing alias of the same name exists and is ReadOnly, the alias will be overwritten. Declaration [Parameter] public SwitchParameter Force { get; set; } Property Value Type Description System.Management.Automation.SwitchParameter | Improve this Doc View Source Name The Name parameter for the command. Declaration [Parameter(Position = 0, Mandatory = true, ValueFromPipelineByPropertyName = true)] public override string Name { get; set; } Property Value Type Description System.String Overrides BynameBase.Name | Improve this Doc View Source Option The Option parameter allows the alias to be set to ReadOnly (for existing aliases) and/or Constant (only for new aliases). Declaration [Parameter] public ScopedItemOptions Option { get; set; } Property Value Type Description System.Management.Automation.ScopedItemOptions | Improve this Doc View Source PassThru If set to true, the alias that is set is passed to the pipeline. Declaration [Parameter] public SwitchParameter PassThru { get; set; } Property Value Type Description System.Management.Automation.SwitchParameter | Improve this Doc View Source Scope The scope parameter for the command determines which scope the alias is set in. Declaration [Parameter] [ValidateSet(new string[]{\"Global\", \"Local\", \"Private\", \"Numbered scopes\", \"Script\"})] public string Scope { get; set; } Property Value Type Description System.String | Improve this Doc View Source Value The Value parameter for the command. Declaration [Parameter(Position = 1, Mandatory = true, ValueFromPipelineByPropertyName = true)] public string Value { get; set; } Property Value Type Description System.String | Improve this Doc View Source WhatIf Shows what would happen if the cmdlet runs. The cmdlet is not run. Declaration [Parameter] [Alias(new string[]{\"wi\"})] public SwitchParameter WhatIf { get; set; } Property Value Type Description System.Management.Automation.SwitchParameter Methods | Improve this Doc View Source ToString() Every WritableByname must have ToString overriden. This is because a Byname is simply a wrapper for the \"New-Alias\" or \"Set-Alias\" command. Therefore, the ToString method represents the either of the previously mentioned alias commands as a string in it's fully qualified form. Declaration public abstract override string ToString() Returns Type Description System.String A string representing the entire command with all options included in the string Overrides System.Object.ToString()"
  },
  "api/PowerPlug.Cmdlets.CompareHashCmdlet.html": {
    "href": "api/PowerPlug.Cmdlets.CompareHashCmdlet.html",
    "title": "Class CompareHashCmdlet",
    "keywords": "Class CompareHashCmdlet Compares a file's user specified hash with another signature This function will compare a user defined hash of a file, such as an executable with the known signature of the file. This is especially useful since hashed values are long. The current supported hashes are SHA256, SHA512, MD5. trash A sample Compare-Sha256 command Compare-Hash .\\audacity-win-2.4.2.exe 1f20cd153b2c322bf1ff9941e4e5204098abdc7da37250ce3fb38612b3e927bc Inheritance System.Object System.Management.Automation.Internal.InternalCommand System.Management.Automation.Cmdlet System.Management.Automation.PSCmdlet CompareHashCmdlet Inherited Members System.Management.Automation.PSCmdlet.CurrentProviderLocation(System.String) System.Management.Automation.PSCmdlet.GetResolvedProviderPathFromPSPath(System.String, System.Management.Automation.ProviderInfo) System.Management.Automation.PSCmdlet.GetUnresolvedProviderPathFromPSPath(System.String) System.Management.Automation.PSCmdlet.GetVariableValue(System.String) System.Management.Automation.PSCmdlet.GetVariableValue(System.String, System.Object) System.Management.Automation.PSCmdlet.Events System.Management.Automation.PSCmdlet.Host System.Management.Automation.PSCmdlet.InvokeCommand System.Management.Automation.PSCmdlet.InvokeProvider System.Management.Automation.PSCmdlet.JobManager System.Management.Automation.PSCmdlet.JobRepository System.Management.Automation.PSCmdlet.MyInvocation System.Management.Automation.PSCmdlet.PagingParameters System.Management.Automation.PSCmdlet.ParameterSetName System.Management.Automation.PSCmdlet.SessionState System.Management.Automation.Cmdlet.BeginProcessing() System.Management.Automation.Cmdlet.EndProcessing() System.Management.Automation.Cmdlet.GetResourceString(System.String, System.String) System.Management.Automation.Cmdlet.Invoke() System.Management.Automation.Cmdlet.Invoke<T>() System.Management.Automation.Cmdlet.ShouldContinue(System.String, System.String, System.Boolean, System.Boolean, System.Boolean) System.Management.Automation.Cmdlet.ShouldContinue(System.String, System.String, System.Boolean, System.Boolean) System.Management.Automation.Cmdlet.ShouldContinue(System.String, System.String) System.Management.Automation.Cmdlet.ShouldProcess(System.String, System.String, System.String, System.Management.Automation.ShouldProcessReason) System.Management.Automation.Cmdlet.ShouldProcess(System.String) System.Management.Automation.Cmdlet.ShouldProcess(System.String, System.String) System.Management.Automation.Cmdlet.ShouldProcess(System.String, System.String, System.String) System.Management.Automation.Cmdlet.StopProcessing() System.Management.Automation.Cmdlet.ThrowTerminatingError(System.Management.Automation.ErrorRecord) System.Management.Automation.Cmdlet.TransactionAvailable() System.Management.Automation.Cmdlet.WriteCommandDetail(System.String) System.Management.Automation.Cmdlet.WriteDebug(System.String) System.Management.Automation.Cmdlet.WriteError(System.Management.Automation.ErrorRecord) System.Management.Automation.Cmdlet.WriteInformation(System.Object, System.String[]) System.Management.Automation.Cmdlet.WriteInformation(System.Management.Automation.InformationRecord) System.Management.Automation.Cmdlet.WriteObject(System.Object, System.Boolean) System.Management.Automation.Cmdlet.WriteObject(System.Object) System.Management.Automation.Cmdlet.WriteProgress(System.Management.Automation.ProgressRecord) System.Management.Automation.Cmdlet.WriteVerbose(System.String) System.Management.Automation.Cmdlet.WriteWarning(System.String) System.Management.Automation.Cmdlet.CommandRuntime System.Management.Automation.Cmdlet.CommonParameters System.Management.Automation.Cmdlet.OptionalCommonParameters System.Management.Automation.Cmdlet.Stopping System.Management.Automation.Internal.InternalCommand.CommandOrigin System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : PowerPlug.Cmdlets Assembly : PowerPlug.dll Syntax [Cmdlet(\"Compare\", \"Hash\")] [Alias(new string[]{\"csh\"})] public class CompareHashCmdlet : PSCmdlet Properties | Improve this Doc View Source Hash The hashing algorithm (SHA256, SHA512, MD5) to use when comparing the signature Declaration [Alias(new string[]{\"HashType\"})] [Parameter(Position = 0, Mandatory = true, HelpMessage = \"Choose from: [SHA256, SHA512, MD5] corresponding to the signature\")] [ValidateSet(new string[]{\"SHA256\", \"SHA512\", \"MD5\"})] public string Hash { get; set; } Property Value Type Description System.String | Improve this Doc View Source Path The path to the file Declaration [Alias(new string[]{\"FilePath\"})] [Parameter(Position = 1, Mandatory = true)] public string Path { get; set; } Property Value Type Description System.String | Improve this Doc View Source Signature The the known SHA256 signature of the file Declaration [Alias(new string[]{\"KnownHash\"})] [Parameter(Position = 2, Mandatory = true, HelpMessage = \"The signature to compare the hashed file against\")] public string Signature { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source ProcessRecord() Processes the PSCmdlet Declaration protected override void ProcessRecord() Overrides System.Management.Automation.Cmdlet.ProcessRecord() Exceptions Type Condition System.NotImplementedException"
  },
  "api/PowerPlug.Cmdlets.html": {
    "href": "api/PowerPlug.Cmdlets.html",
    "title": "Namespace PowerPlug.Cmdlets",
    "keywords": "Namespace PowerPlug.Cmdlets Classes CompareHashCmdlet Compares a file's user specified hash with another signature This function will compare a user defined hash of a file, such as an executable with the known signature of the file. This is especially useful since hashed values are long. The current supported hashes are SHA256, SHA512, MD5. trash A sample Compare-Sha256 command Compare-Hash .\\audacity-win-2.4.2.exe 1f20cd153b2c322bf1ff9941e4e5204098abdc7da37250ce3fb38612b3e927bc MoveTrashCmdlet Moves a file to the Recycle Bin This function will move a file, whether directory or file, to the system Recycle Bin. If the param list is true, it will print the contents of the current directory after recycling the file. Only error dialogs are printed and no confirmation message is shown. trash A sample Move-Trash command Move-Trash -Path Documents\\file.txt -List NewBynameCmdlet Creates a new Byname New-Byname is a wrapper cmdlet for the New-Alias cmdlet, however, the fully qualified command name is written to the user's $PROFILE. An error is thrown if no $PROFILE exists. This cmdlet is to be used for trivial purposes to quickly persist an alias across sessions. It should not be used outside of the PowerShell Console in order to prevent unintended behavior. nbn A sample New-Byname command New-Byname -Name list -Value Get-ChildItem RemoveBynameCmdlet Removes a new Byname Remove-Byname is a wrapper cmdlet for the Remove-Alias cmdlet. All instances of the The fully qualified command name are removed from the $PROFILE. An error is thrown if no $PROFILE exists. This cmdlet is to be used for trivial purposes to quickly persist an alias across sessions. It should not be used outside of the PowerShell Console in order to prevent unintended behavior. Extra precaution should be used when using Remove-Byname as it removes all aliases with the same name from the $PROFILE. rbn A sample Remove-Byname command Remove-Byname -Name list SetBynameCmdlet Sets a new Byname Set-Byname is a wrapper cmdlet for the Set-Alias cmdlet, however, the fully qualified command name is written to the user's $PROFILE. An error is thrown if no $PROFILE exists. This cmdlet is to be used for trivial purposes to quickly persist an alias across sessions. It should not be used outside of the PowerShell Console in order to prevent unintended behavior. sbn A sample Set-Byname command Set-Byname -Name gh -Value Get-Help"
  },
  "api/PowerPlug.Cmdlets.MoveTrashCmdlet.html": {
    "href": "api/PowerPlug.Cmdlets.MoveTrashCmdlet.html",
    "title": "Class MoveTrashCmdlet",
    "keywords": "Class MoveTrashCmdlet Moves a file to the Recycle Bin This function will move a file, whether directory or file, to the system Recycle Bin. If the param list is true, it will print the contents of the current directory after recycling the file. Only error dialogs are printed and no confirmation message is shown. trash A sample Move-Trash command Move-Trash -Path Documents\\file.txt -List Inheritance System.Object System.Management.Automation.Internal.InternalCommand System.Management.Automation.Cmdlet System.Management.Automation.PSCmdlet MoveTrashCmdlet Inherited Members System.Management.Automation.PSCmdlet.CurrentProviderLocation(System.String) System.Management.Automation.PSCmdlet.GetResolvedProviderPathFromPSPath(System.String, System.Management.Automation.ProviderInfo) System.Management.Automation.PSCmdlet.GetUnresolvedProviderPathFromPSPath(System.String) System.Management.Automation.PSCmdlet.GetVariableValue(System.String) System.Management.Automation.PSCmdlet.GetVariableValue(System.String, System.Object) System.Management.Automation.PSCmdlet.Events System.Management.Automation.PSCmdlet.Host System.Management.Automation.PSCmdlet.InvokeCommand System.Management.Automation.PSCmdlet.InvokeProvider System.Management.Automation.PSCmdlet.JobManager System.Management.Automation.PSCmdlet.JobRepository System.Management.Automation.PSCmdlet.MyInvocation System.Management.Automation.PSCmdlet.PagingParameters System.Management.Automation.PSCmdlet.ParameterSetName System.Management.Automation.PSCmdlet.SessionState System.Management.Automation.Cmdlet.BeginProcessing() System.Management.Automation.Cmdlet.EndProcessing() System.Management.Automation.Cmdlet.GetResourceString(System.String, System.String) System.Management.Automation.Cmdlet.Invoke() System.Management.Automation.Cmdlet.Invoke<T>() System.Management.Automation.Cmdlet.ShouldContinue(System.String, System.String, System.Boolean, System.Boolean, System.Boolean) System.Management.Automation.Cmdlet.ShouldContinue(System.String, System.String, System.Boolean, System.Boolean) System.Management.Automation.Cmdlet.ShouldContinue(System.String, System.String) System.Management.Automation.Cmdlet.ShouldProcess(System.String, System.String, System.String, System.Management.Automation.ShouldProcessReason) System.Management.Automation.Cmdlet.ShouldProcess(System.String) System.Management.Automation.Cmdlet.ShouldProcess(System.String, System.String) System.Management.Automation.Cmdlet.ShouldProcess(System.String, System.String, System.String) System.Management.Automation.Cmdlet.StopProcessing() System.Management.Automation.Cmdlet.ThrowTerminatingError(System.Management.Automation.ErrorRecord) System.Management.Automation.Cmdlet.TransactionAvailable() System.Management.Automation.Cmdlet.WriteCommandDetail(System.String) System.Management.Automation.Cmdlet.WriteDebug(System.String) System.Management.Automation.Cmdlet.WriteError(System.Management.Automation.ErrorRecord) System.Management.Automation.Cmdlet.WriteInformation(System.Object, System.String[]) System.Management.Automation.Cmdlet.WriteInformation(System.Management.Automation.InformationRecord) System.Management.Automation.Cmdlet.WriteObject(System.Object, System.Boolean) System.Management.Automation.Cmdlet.WriteObject(System.Object) System.Management.Automation.Cmdlet.WriteProgress(System.Management.Automation.ProgressRecord) System.Management.Automation.Cmdlet.WriteVerbose(System.String) System.Management.Automation.Cmdlet.WriteWarning(System.String) System.Management.Automation.Cmdlet.CommandRuntime System.Management.Automation.Cmdlet.CommonParameters System.Management.Automation.Cmdlet.OptionalCommonParameters System.Management.Automation.Cmdlet.Stopping System.Management.Automation.Internal.InternalCommand.CommandOrigin System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : PowerPlug.Cmdlets Assembly : PowerPlug.dll Syntax [Cmdlet(\"Move\", \"Trash\")] [Alias(new string[]{\"trash\"})] public class MoveTrashCmdlet : PSCmdlet Properties | Improve this Doc View Source List A flag indicating whether to print the contents of the current directory Declaration [Alias(new string[]{\"ListDirectory\"})] [Parameter(Position = 1, Mandatory = false)] public SwitchParameter List { get; set; } Property Value Type Description System.Management.Automation.SwitchParameter | Improve this Doc View Source Path The path to the file Declaration [Alias(new string[]{\"FilePath\"})] [Parameter(Position = 0, Mandatory = true, ValueFromPipeline = true)] public string Path { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source ProcessRecord() Processes the PSCmdlet Declaration protected override void ProcessRecord() Overrides System.Management.Automation.Cmdlet.ProcessRecord()"
  },
  "api/PowerPlug.Cmdlets.NewBynameCmdlet.html": {
    "href": "api/PowerPlug.Cmdlets.NewBynameCmdlet.html",
    "title": "Class NewBynameCmdlet",
    "keywords": "Class NewBynameCmdlet Creates a new Byname New-Byname is a wrapper cmdlet for the New-Alias cmdlet, however, the fully qualified command name is written to the user's $PROFILE. An error is thrown if no $PROFILE exists. This cmdlet is to be used for trivial purposes to quickly persist an alias across sessions. It should not be used outside of the PowerShell Console in order to prevent unintended behavior. nbn A sample New-Byname command New-Byname -Name list -Value Get-ChildItem Inheritance System.Object System.Management.Automation.Internal.InternalCommand System.Management.Automation.Cmdlet System.Management.Automation.PSCmdlet BynameBase WritableByname NewBynameCmdlet Inherited Members WritableByname.Name WritableByname.Scope WritableByname.Force WritableByname.Value WritableByname.Description WritableByname.Option WritableByname.PassThru WritableByname.WhatIf WritableByname.Confirm System.Management.Automation.PSCmdlet.CurrentProviderLocation(System.String) System.Management.Automation.PSCmdlet.GetResolvedProviderPathFromPSPath(System.String, System.Management.Automation.ProviderInfo) System.Management.Automation.PSCmdlet.GetUnresolvedProviderPathFromPSPath(System.String) System.Management.Automation.PSCmdlet.GetVariableValue(System.String) System.Management.Automation.PSCmdlet.GetVariableValue(System.String, System.Object) System.Management.Automation.PSCmdlet.Events System.Management.Automation.PSCmdlet.Host System.Management.Automation.PSCmdlet.InvokeCommand System.Management.Automation.PSCmdlet.InvokeProvider System.Management.Automation.PSCmdlet.JobManager System.Management.Automation.PSCmdlet.JobRepository System.Management.Automation.PSCmdlet.MyInvocation System.Management.Automation.PSCmdlet.PagingParameters System.Management.Automation.PSCmdlet.ParameterSetName System.Management.Automation.PSCmdlet.SessionState System.Management.Automation.Cmdlet.BeginProcessing() System.Management.Automation.Cmdlet.EndProcessing() System.Management.Automation.Cmdlet.GetResourceString(System.String, System.String) System.Management.Automation.Cmdlet.Invoke() System.Management.Automation.Cmdlet.Invoke<T>() System.Management.Automation.Cmdlet.ShouldContinue(System.String, System.String, System.Boolean, System.Boolean, System.Boolean) System.Management.Automation.Cmdlet.ShouldContinue(System.String, System.String, System.Boolean, System.Boolean) System.Management.Automation.Cmdlet.ShouldContinue(System.String, System.String) System.Management.Automation.Cmdlet.ShouldProcess(System.String, System.String, System.String, System.Management.Automation.ShouldProcessReason) System.Management.Automation.Cmdlet.ShouldProcess(System.String) System.Management.Automation.Cmdlet.ShouldProcess(System.String, System.String) System.Management.Automation.Cmdlet.ShouldProcess(System.String, System.String, System.String) System.Management.Automation.Cmdlet.StopProcessing() System.Management.Automation.Cmdlet.ThrowTerminatingError(System.Management.Automation.ErrorRecord) System.Management.Automation.Cmdlet.TransactionAvailable() System.Management.Automation.Cmdlet.WriteCommandDetail(System.String) System.Management.Automation.Cmdlet.WriteDebug(System.String) System.Management.Automation.Cmdlet.WriteError(System.Management.Automation.ErrorRecord) System.Management.Automation.Cmdlet.WriteInformation(System.Object, System.String[]) System.Management.Automation.Cmdlet.WriteInformation(System.Management.Automation.InformationRecord) System.Management.Automation.Cmdlet.WriteObject(System.Object, System.Boolean) System.Management.Automation.Cmdlet.WriteObject(System.Object) System.Management.Automation.Cmdlet.WriteProgress(System.Management.Automation.ProgressRecord) System.Management.Automation.Cmdlet.WriteVerbose(System.String) System.Management.Automation.Cmdlet.WriteWarning(System.String) System.Management.Automation.Cmdlet.CommandRuntime System.Management.Automation.Cmdlet.CommonParameters System.Management.Automation.Cmdlet.OptionalCommonParameters System.Management.Automation.Cmdlet.Stopping System.Management.Automation.Internal.InternalCommand.CommandOrigin System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : PowerPlug.Cmdlets Assembly : PowerPlug.dll Syntax [Cmdlet(\"New\", \"Byname\", HelpUri = \"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/new-alias?view=powershell-7\")] [Alias(new string[]{\"nbn\"})] public class NewBynameCmdlet : WritableByname Methods | Improve this Doc View Source ProcessRecord() Processes the New-Byname PSCmdlet. Declaration protected override void ProcessRecord() Overrides System.Management.Automation.Cmdlet.ProcessRecord() | Improve this Doc View Source ToString() Every WritableByname must have ToString overriden. This is because a Byname is simply a wrapper for the \"New-Alias\" or \"Set-Alias\" command. Therefore, the ToString method represents the either of the previously mentioned alias commands as a string in it's fully qualified form. Declaration public override string ToString() Returns Type Description System.String A string representing the entire command with all options included in the string Overrides WritableByname.ToString()"
  },
  "api/PowerPlug.Cmdlets.RemoveBynameCmdlet.html": {
    "href": "api/PowerPlug.Cmdlets.RemoveBynameCmdlet.html",
    "title": "Class RemoveBynameCmdlet",
    "keywords": "Class RemoveBynameCmdlet Removes a new Byname Remove-Byname is a wrapper cmdlet for the Remove-Alias cmdlet. All instances of the The fully qualified command name are removed from the $PROFILE. An error is thrown if no $PROFILE exists. This cmdlet is to be used for trivial purposes to quickly persist an alias across sessions. It should not be used outside of the PowerShell Console in order to prevent unintended behavior. Extra precaution should be used when using Remove-Byname as it removes all aliases with the same name from the $PROFILE. rbn A sample Remove-Byname command Remove-Byname -Name list Inheritance System.Object System.Management.Automation.Internal.InternalCommand System.Management.Automation.Cmdlet System.Management.Automation.PSCmdlet BynameBase RemoveBynameCmdlet Inherited Members System.Management.Automation.PSCmdlet.CurrentProviderLocation(System.String) System.Management.Automation.PSCmdlet.GetResolvedProviderPathFromPSPath(System.String, System.Management.Automation.ProviderInfo) System.Management.Automation.PSCmdlet.GetUnresolvedProviderPathFromPSPath(System.String) System.Management.Automation.PSCmdlet.GetVariableValue(System.String) System.Management.Automation.PSCmdlet.GetVariableValue(System.String, System.Object) System.Management.Automation.PSCmdlet.Events System.Management.Automation.PSCmdlet.Host System.Management.Automation.PSCmdlet.InvokeCommand System.Management.Automation.PSCmdlet.InvokeProvider System.Management.Automation.PSCmdlet.JobManager System.Management.Automation.PSCmdlet.JobRepository System.Management.Automation.PSCmdlet.MyInvocation System.Management.Automation.PSCmdlet.PagingParameters System.Management.Automation.PSCmdlet.ParameterSetName System.Management.Automation.PSCmdlet.SessionState System.Management.Automation.Cmdlet.BeginProcessing() System.Management.Automation.Cmdlet.EndProcessing() System.Management.Automation.Cmdlet.GetResourceString(System.String, System.String) System.Management.Automation.Cmdlet.Invoke() System.Management.Automation.Cmdlet.Invoke<T>() System.Management.Automation.Cmdlet.ShouldContinue(System.String, System.String, System.Boolean, System.Boolean, System.Boolean) System.Management.Automation.Cmdlet.ShouldContinue(System.String, System.String, System.Boolean, System.Boolean) System.Management.Automation.Cmdlet.ShouldContinue(System.String, System.String) System.Management.Automation.Cmdlet.ShouldProcess(System.String, System.String, System.String, System.Management.Automation.ShouldProcessReason) System.Management.Automation.Cmdlet.ShouldProcess(System.String) System.Management.Automation.Cmdlet.ShouldProcess(System.String, System.String) System.Management.Automation.Cmdlet.ShouldProcess(System.String, System.String, System.String) System.Management.Automation.Cmdlet.StopProcessing() System.Management.Automation.Cmdlet.ThrowTerminatingError(System.Management.Automation.ErrorRecord) System.Management.Automation.Cmdlet.TransactionAvailable() System.Management.Automation.Cmdlet.WriteCommandDetail(System.String) System.Management.Automation.Cmdlet.WriteDebug(System.String) System.Management.Automation.Cmdlet.WriteError(System.Management.Automation.ErrorRecord) System.Management.Automation.Cmdlet.WriteInformation(System.Object, System.String[]) System.Management.Automation.Cmdlet.WriteInformation(System.Management.Automation.InformationRecord) System.Management.Automation.Cmdlet.WriteObject(System.Object, System.Boolean) System.Management.Automation.Cmdlet.WriteObject(System.Object) System.Management.Automation.Cmdlet.WriteProgress(System.Management.Automation.ProgressRecord) System.Management.Automation.Cmdlet.WriteVerbose(System.String) System.Management.Automation.Cmdlet.WriteWarning(System.String) System.Management.Automation.Cmdlet.CommandRuntime System.Management.Automation.Cmdlet.CommonParameters System.Management.Automation.Cmdlet.OptionalCommonParameters System.Management.Automation.Cmdlet.Stopping System.Management.Automation.Internal.InternalCommand.CommandOrigin System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : PowerPlug.Cmdlets Assembly : PowerPlug.dll Syntax [Cmdlet(\"Remove\", \"Byname\", HelpUri = \"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/remove-alias?view=powershell-7\")] [Alias(new string[]{\"rbn\"})] public class RemoveBynameCmdlet : BynameBase Properties | Improve this Doc View Source Force If set to true and an existing alias of the same name exists and is ReadOnly, the alias will be overwritten. Declaration [Parameter] public SwitchParameter Force { get; set; } Property Value Type Description System.Management.Automation.SwitchParameter | Improve this Doc View Source Name The Name parameter for the command. Declaration [Parameter(Position = 0, Mandatory = true, ValueFromPipelineByPropertyName = true)] public override string Name { get; set; } Property Value Type Description System.String Overrides BynameBase.Name | Improve this Doc View Source Scope The scope parameter for the command determines which scope the alias is set in. Declaration [Parameter] [ValidateSet(new string[]{\"Global\", \"Local\", \"Script\"})] public string Scope { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source ProcessRecord() Processes the Remove-Byname PSCmdlet. Declaration protected override void ProcessRecord() Overrides System.Management.Automation.Cmdlet.ProcessRecord() | Improve this Doc View Source ToString() The fully qualified Remove-Byname command as it's executed in the command-line. Because Remove-Byname is a wrapper for Remove-Alias, the ToString version uses Remove-Alias as the cmdlet name. Declaration public override string ToString() Returns Type Description System.String A string representing the entire command with all options included in the string Overrides System.Object.ToString()"
  },
  "api/PowerPlug.Cmdlets.SetBynameCmdlet.html": {
    "href": "api/PowerPlug.Cmdlets.SetBynameCmdlet.html",
    "title": "Class SetBynameCmdlet",
    "keywords": "Class SetBynameCmdlet Sets a new Byname Set-Byname is a wrapper cmdlet for the Set-Alias cmdlet, however, the fully qualified command name is written to the user's $PROFILE. An error is thrown if no $PROFILE exists. This cmdlet is to be used for trivial purposes to quickly persist an alias across sessions. It should not be used outside of the PowerShell Console in order to prevent unintended behavior. sbn A sample Set-Byname command Set-Byname -Name gh -Value Get-Help Inheritance System.Object System.Management.Automation.Internal.InternalCommand System.Management.Automation.Cmdlet System.Management.Automation.PSCmdlet BynameBase WritableByname SetBynameCmdlet Inherited Members WritableByname.Name WritableByname.Scope WritableByname.Force WritableByname.Value WritableByname.Description WritableByname.Option WritableByname.PassThru WritableByname.WhatIf WritableByname.Confirm System.Management.Automation.PSCmdlet.CurrentProviderLocation(System.String) System.Management.Automation.PSCmdlet.GetResolvedProviderPathFromPSPath(System.String, System.Management.Automation.ProviderInfo) System.Management.Automation.PSCmdlet.GetUnresolvedProviderPathFromPSPath(System.String) System.Management.Automation.PSCmdlet.GetVariableValue(System.String) System.Management.Automation.PSCmdlet.GetVariableValue(System.String, System.Object) System.Management.Automation.PSCmdlet.Events System.Management.Automation.PSCmdlet.Host System.Management.Automation.PSCmdlet.InvokeCommand System.Management.Automation.PSCmdlet.InvokeProvider System.Management.Automation.PSCmdlet.JobManager System.Management.Automation.PSCmdlet.JobRepository System.Management.Automation.PSCmdlet.MyInvocation System.Management.Automation.PSCmdlet.PagingParameters System.Management.Automation.PSCmdlet.ParameterSetName System.Management.Automation.PSCmdlet.SessionState System.Management.Automation.Cmdlet.BeginProcessing() System.Management.Automation.Cmdlet.EndProcessing() System.Management.Automation.Cmdlet.GetResourceString(System.String, System.String) System.Management.Automation.Cmdlet.Invoke() System.Management.Automation.Cmdlet.Invoke<T>() System.Management.Automation.Cmdlet.ShouldContinue(System.String, System.String, System.Boolean, System.Boolean, System.Boolean) System.Management.Automation.Cmdlet.ShouldContinue(System.String, System.String, System.Boolean, System.Boolean) System.Management.Automation.Cmdlet.ShouldContinue(System.String, System.String) System.Management.Automation.Cmdlet.ShouldProcess(System.String, System.String, System.String, System.Management.Automation.ShouldProcessReason) System.Management.Automation.Cmdlet.ShouldProcess(System.String) System.Management.Automation.Cmdlet.ShouldProcess(System.String, System.String) System.Management.Automation.Cmdlet.ShouldProcess(System.String, System.String, System.String) System.Management.Automation.Cmdlet.StopProcessing() System.Management.Automation.Cmdlet.ThrowTerminatingError(System.Management.Automation.ErrorRecord) System.Management.Automation.Cmdlet.TransactionAvailable() System.Management.Automation.Cmdlet.WriteCommandDetail(System.String) System.Management.Automation.Cmdlet.WriteDebug(System.String) System.Management.Automation.Cmdlet.WriteError(System.Management.Automation.ErrorRecord) System.Management.Automation.Cmdlet.WriteInformation(System.Object, System.String[]) System.Management.Automation.Cmdlet.WriteInformation(System.Management.Automation.InformationRecord) System.Management.Automation.Cmdlet.WriteObject(System.Object, System.Boolean) System.Management.Automation.Cmdlet.WriteObject(System.Object) System.Management.Automation.Cmdlet.WriteProgress(System.Management.Automation.ProgressRecord) System.Management.Automation.Cmdlet.WriteVerbose(System.String) System.Management.Automation.Cmdlet.WriteWarning(System.String) System.Management.Automation.Cmdlet.CommandRuntime System.Management.Automation.Cmdlet.CommonParameters System.Management.Automation.Cmdlet.OptionalCommonParameters System.Management.Automation.Cmdlet.Stopping System.Management.Automation.Internal.InternalCommand.CommandOrigin System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : PowerPlug.Cmdlets Assembly : PowerPlug.dll Syntax [Cmdlet(\"Set\", \"Byname\", HelpUri = \"https://docs.microsoft.com/en-us/powershell/module/Microsoft.PowerShell.Utility/Set-Alias?view=powershell-7\")] [Alias(new string[]{\"sbn\"})] public class SetBynameCmdlet : WritableByname Methods | Improve this Doc View Source ProcessRecord() Processes the Set-Byname PSCmdlet. Declaration protected override void ProcessRecord() Overrides System.Management.Automation.Cmdlet.ProcessRecord() | Improve this Doc View Source ToString() Every WritableByname must have ToString overriden. This is because a Byname is simply a wrapper for the \"New-Alias\" or \"Set-Alias\" command. Therefore, the ToString method represents the either of the previously mentioned alias commands as a string in it's fully qualified form. Declaration public override string ToString() Returns Type Description System.String A string representing the entire command with all options included in the string Overrides WritableByname.ToString()"
  },
  "api/PowerPlug.Engines.Byname.Base.BynameCreatorContext.html": {
    "href": "api/PowerPlug.Engines.Byname.Base.BynameCreatorContext.html",
    "title": "Class BynameCreatorContext",
    "keywords": "Class BynameCreatorContext A BynameCreator context which invokes a PowerPlug.Engines.Byname.Base.BynameCreatorContext.BynameCreatorStrategy instance. The context is useful for invoking instances of a strategy design pattern. Inheritance System.Object BynameCreatorContext Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : PowerPlug.Engines.Byname.Base Assembly : PowerPlug.dll Syntax public class BynameCreatorContext Constructors | Improve this Doc View Source BynameCreatorContext(BynameCreatorStrategy) Creates a new BynameCreatorContext given a BynameCreator strategy. Declaration public BynameCreatorContext(BynameCreatorStrategy bynameCreatorStrategy) Parameters Type Name Description BynameCreatorStrategy bynameCreatorStrategy Methods | Improve this Doc View Source ExecuteStrategy() Executes a BynameCreatorStrategy instance assigned to this instance. Declaration public void ExecuteStrategy()"
  },
  "api/PowerPlug.Engines.Byname.Base.BynameCreatorStrategy.html": {
    "href": "api/PowerPlug.Engines.Byname.Base.BynameCreatorStrategy.html",
    "title": "Class BynameCreatorStrategy",
    "keywords": "Class BynameCreatorStrategy A strategy class to invoke a BynameCreator of a specific type. This follows the strategy design pattern. Inheritance System.Object BynameCreatorStrategy RemoveBynameCreatorOperation WritableBynameCreatorBaseOperation Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : PowerPlug.Engines.Byname.Base Assembly : PowerPlug.dll Syntax public abstract class BynameCreatorStrategy Constructors | Improve this Doc View Source BynameCreatorStrategy(IEnumerable<PSObject>) Sets the variables for the BynameCreatorStrategy. Declaration protected BynameCreatorStrategy(IEnumerable<PSObject> commandResults) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Management.Automation.PSObject > commandResults The results of invoking the PowerShell command Properties | Improve this Doc View Source ProfileInfo A Profile instance containing information about the location of the PowerShell $PROFILE Declaration public Profile ProfileInfo { get; } Property Value Type Description Profile | Improve this Doc View Source PsCommandResults The results of the PowerShell command as an System.Collections.Generic.IEnumerable<T> Declaration protected IEnumerable<PSObject> PsCommandResults { get; } Property Value Type Description System.Collections.Generic.IEnumerable < System.Management.Automation.PSObject > Methods | Improve this Doc View Source ExecuteCommand() Executes a BynameCreator command. This could be any operation the command introduces in order to create a Byname. Declaration public abstract void ExecuteCommand()"
  },
  "api/PowerPlug.Engines.Byname.Base.html": {
    "href": "api/PowerPlug.Engines.Byname.Base.html",
    "title": "Namespace PowerPlug.Engines.Byname.Base",
    "keywords": "Namespace PowerPlug.Engines.Byname.Base Classes BynameCreatorContext A BynameCreator context which invokes a PowerPlug.Engines.Byname.Base.BynameCreatorContext.BynameCreatorStrategy instance. The context is useful for invoking instances of a strategy design pattern. BynameCreatorStrategy A strategy class to invoke a BynameCreator of a specific type. This follows the strategy design pattern."
  },
  "api/PowerPlug.Engines.Byname.html": {
    "href": "api/PowerPlug.Engines.Byname.html",
    "title": "Namespace PowerPlug.Engines.Byname",
    "keywords": "Namespace PowerPlug.Engines.Byname Classes NewBynameCreatorOperation The NewBynameCreatorOperation is responsible for writing the actual contents of the Byname cmdlet into the $PROFILE. RemoveBynameCreatorOperation The RemoveBynameCreatorOperation is responsible for removing an existing Byname cmdlet string from the user's $PROFILE. SetBynameCreatorOperation The SetBynameCreatorOperation is responsible for writing the actual contents of the Byname cmdlet into the $PROFILE. This class will be responsible replace the contents of an existing cmdlet. WritableBynameCreatorBaseOperation The base Operation to create a writable Byname (classes that inherit WritableByname ). This class is part of a broader Byname Strategy to execute cmdlets."
  },
  "api/PowerPlug.Engines.Byname.NewBynameCreatorOperation.html": {
    "href": "api/PowerPlug.Engines.Byname.NewBynameCreatorOperation.html",
    "title": "Class NewBynameCreatorOperation",
    "keywords": "Class NewBynameCreatorOperation The NewBynameCreatorOperation is responsible for writing the actual contents of the Byname cmdlet into the $PROFILE. Inheritance System.Object BynameCreatorStrategy WritableBynameCreatorBaseOperation NewBynameCreatorOperation Inherited Members WritableBynameCreatorBaseOperation.NewAliasCommand WritableBynameCreatorBaseOperation.SetAliasCommand WritableBynameCreatorBaseOperation.PsCommandAsString WritableBynameCreatorBaseOperation.AliasCmdlet BynameCreatorStrategy.ProfileInfo BynameCreatorStrategy.PsCommandResults System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : PowerPlug.Engines.Byname Assembly : PowerPlug.dll Syntax public class NewBynameCreatorOperation : WritableBynameCreatorBaseOperation Constructors | Improve this Doc View Source NewBynameCreatorOperation(WritableByname, IEnumerable<PSObject>) Sets the variables for this cmdlet. The results of the command and the command string are also set. If the -Value of the command string is a function, the function is appended to the command string. Declaration public NewBynameCreatorOperation(WritableByname cmdlet, IEnumerable<PSObject> commandResults) Parameters Type Name Description WritableByname cmdlet The WritableByname cmdlet System.Collections.Generic.IEnumerable < System.Management.Automation.PSObject > commandResults The results of invoking the PowerShell command for the WritableByname cmdlet Methods | Improve this Doc View Source ExecuteCommand() Writes all of the information from the invoked command to the PowerShell console. The information is then written to the PowerShell $PROFILE. Declaration public override void ExecuteCommand() Overrides BynameCreatorStrategy.ExecuteCommand()"
  },
  "api/PowerPlug.Engines.Byname.RemoveBynameCreatorOperation.html": {
    "href": "api/PowerPlug.Engines.Byname.RemoveBynameCreatorOperation.html",
    "title": "Class RemoveBynameCreatorOperation",
    "keywords": "Class RemoveBynameCreatorOperation The RemoveBynameCreatorOperation is responsible for removing an existing Byname cmdlet string from the user's $PROFILE. Inheritance System.Object BynameCreatorStrategy RemoveBynameCreatorOperation Inherited Members BynameCreatorStrategy.ProfileInfo BynameCreatorStrategy.PsCommandResults System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : PowerPlug.Engines.Byname Assembly : PowerPlug.dll Syntax public class RemoveBynameCreatorOperation : BynameCreatorStrategy Constructors | Improve this Doc View Source RemoveBynameCreatorOperation(RemoveBynameCmdlet, IEnumerable<PSObject>) Sets the variables for this cmdlet. Declaration public RemoveBynameCreatorOperation(RemoveBynameCmdlet cmdlet, IEnumerable<PSObject> commandResults) Parameters Type Name Description RemoveBynameCmdlet cmdlet The WritableByname cmdlet System.Collections.Generic.IEnumerable < System.Management.Automation.PSObject > commandResults The results of invoking the PowerShell command for the RemoveBynameCmdlet cmdlet Fields | Improve this Doc View Source RemoveAliasCommand The Remove-Alias command as a string constant. Declaration protected const string RemoveAliasCommand = \"Remove-Alias\" Field Value Type Description System.String Properties | Improve this Doc View Source AliasCmdlet The RemoveBynameCmdlet instance Declaration protected RemoveBynameCmdlet AliasCmdlet { get; } Property Value Type Description RemoveBynameCmdlet Methods | Improve this Doc View Source ExecuteCommand() Removes all of the command string information from the user's $PROFILE. Declaration public override void ExecuteCommand() Overrides BynameCreatorStrategy.ExecuteCommand()"
  },
  "api/PowerPlug.Engines.Byname.SetBynameCreatorOperation.html": {
    "href": "api/PowerPlug.Engines.Byname.SetBynameCreatorOperation.html",
    "title": "Class SetBynameCreatorOperation",
    "keywords": "Class SetBynameCreatorOperation The SetBynameCreatorOperation is responsible for writing the actual contents of the Byname cmdlet into the $PROFILE. This class will be responsible replace the contents of an existing cmdlet. Inheritance System.Object BynameCreatorStrategy WritableBynameCreatorBaseOperation SetBynameCreatorOperation Inherited Members WritableBynameCreatorBaseOperation.NewAliasCommand WritableBynameCreatorBaseOperation.SetAliasCommand WritableBynameCreatorBaseOperation.PsCommandAsString WritableBynameCreatorBaseOperation.AliasCmdlet BynameCreatorStrategy.ProfileInfo BynameCreatorStrategy.PsCommandResults System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : PowerPlug.Engines.Byname Assembly : PowerPlug.dll Syntax public class SetBynameCreatorOperation : WritableBynameCreatorBaseOperation Constructors | Improve this Doc View Source SetBynameCreatorOperation(WritableByname, IEnumerable<PSObject>) Sets the variables for this cmdlet. The results of the command and the command string are also set. If the -Value of the command string is a function, the function is appended to the command string. Declaration public SetBynameCreatorOperation(WritableByname cmdlet, IEnumerable<PSObject> commandResults) Parameters Type Name Description WritableByname cmdlet The WritableByname cmdlet System.Collections.Generic.IEnumerable < System.Management.Automation.PSObject > commandResults The results of invoking the PowerShell command for the WritableByname cmdlet Methods | Improve this Doc View Source ExecuteCommand() Writes all of the information from the invoked command to the PowerShell console. The information is then written to the PowerShell $PROFILE. Declaration public override void ExecuteCommand() Overrides BynameCreatorStrategy.ExecuteCommand()"
  },
  "api/PowerPlug.Engines.Byname.WritableBynameCreatorBaseOperation.html": {
    "href": "api/PowerPlug.Engines.Byname.WritableBynameCreatorBaseOperation.html",
    "title": "Class WritableBynameCreatorBaseOperation",
    "keywords": "Class WritableBynameCreatorBaseOperation The base Operation to create a writable Byname (classes that inherit WritableByname ). This class is part of a broader Byname Strategy to execute cmdlets. Inheritance System.Object BynameCreatorStrategy WritableBynameCreatorBaseOperation NewBynameCreatorOperation SetBynameCreatorOperation Inherited Members BynameCreatorStrategy.ProfileInfo BynameCreatorStrategy.PsCommandResults BynameCreatorStrategy.ExecuteCommand() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : PowerPlug.Engines.Byname Assembly : PowerPlug.dll Syntax public abstract class WritableBynameCreatorBaseOperation : BynameCreatorStrategy Constructors | Improve this Doc View Source WritableBynameCreatorBaseOperation(WritableByname, IEnumerable<PSObject>) Sets the variables for this cmdlet. The results of the command and the command string are also set. If the -Value of the command string is a function, the function is appended to the command string. Declaration protected WritableBynameCreatorBaseOperation(WritableByname cmdlet, IEnumerable<PSObject> commandResults) Parameters Type Name Description WritableByname cmdlet The WritableByname cmdlet System.Collections.Generic.IEnumerable < System.Management.Automation.PSObject > commandResults The results of invoking the PowerShell command for the WritableByname cmdlet Fields | Improve this Doc View Source NewAliasCommand The New-Alias command as a string constant. Declaration public const string NewAliasCommand = \"New-Alias\" Field Value Type Description System.String | Improve this Doc View Source SetAliasCommand The Set-Alias command as a string constant. Declaration public const string SetAliasCommand = \"Set-Alias\" Field Value Type Description System.String Properties | Improve this Doc View Source AliasCmdlet The WritableByname instance Declaration protected WritableByname AliasCmdlet { get; } Property Value Type Description WritableByname | Improve this Doc View Source PsCommandAsString The PowerShell command to write to the $PROFILE as a string (including any functions that need to be written). Declaration protected string PsCommandAsString { get; } Property Value Type Description System.String"
  },
  "api/PowerPlug.PowerPlugFile.FileUtilities.html": {
    "href": "api/PowerPlug.PowerPlugFile.FileUtilities.html",
    "title": "Class FileUtilities",
    "keywords": "Class FileUtilities A static class for File utility functions Inheritance System.Object FileUtilities Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : PowerPlug.PowerPlugFile Assembly : PowerPlug.dll Syntax public static class FileUtilities Methods | Improve this Doc View Source FindInFile(FileInfo, Func<String, Boolean>) Returns the line of the matched predicate in the file. If the predicate is not found, -1 is returned. Declaration public static int FindInFile(FileInfo fileInfo, Func<string, bool> predicate) Parameters Type Name Description System.IO.FileInfo fileInfo The FileInfo instance to read from System.Func < System.String , System.Boolean > predicate The function predicate to find in the file Returns Type Description System.Int32 | Improve this Doc View Source GetValueAtLine(FileInfo, Int32) Returns the value found at a line number. Declaration public static string GetValueAtLine(FileInfo fileInfo, int line) Parameters Type Name Description System.IO.FileInfo fileInfo The FileInfo instance to read from System.Int32 line The line number to find Returns Type Description System.String | Improve this Doc View Source RemoveFromEachLine(FileInfo, String) Removes all instances of a specific value from a file if and only if the value is solely in one line. Declaration public static void RemoveFromEachLine(FileInfo fileInfo, string valToRemove) Parameters Type Name Description System.IO.FileInfo fileInfo The FileInfo instance to write the value to System.String valToRemove The value to remove | Improve this Doc View Source RemoveLine(FileInfo, Int32) Removes a specific line number from a file. Declaration public static void RemoveLine(FileInfo fileInfo, int line) Parameters Type Name Description System.IO.FileInfo fileInfo The FileInfo instance to write the value to System.Int32 line The line number to remove | Improve this Doc View Source RemoveLines(FileInfo, Int32[]) Removes a variable argument number of lines from a file. Declaration public static void RemoveLines(FileInfo fileInfo, params int[] lines) Parameters Type Name Description System.IO.FileInfo fileInfo The FileInfo instance to write the value to System.Int32 [] lines The line numbers to remove | Improve this Doc View Source ReplaceAll(FileInfo, String, String) Replaces all instances of a specific value from a file with another replacement value. Declaration public static void ReplaceAll(FileInfo fileInfo, string oldValue, string replacementValue) Parameters Type Name Description System.IO.FileInfo fileInfo The FileInfo instance to write the value to System.String oldValue The value to replace System.String replacementValue The replacement value | Improve this Doc View Source ReplaceAllByLine(FileInfo, String, String) Replaces all instances of a specific value from a file with another replacement value if and only if the old value is solely in one line. Declaration public static void ReplaceAllByLine(FileInfo fileInfo, string oldValue, string replacementValue) Parameters Type Name Description System.IO.FileInfo fileInfo The FileInfo instance to write the value to System.String oldValue The value to replace System.String replacementValue The replacement value | Improve this Doc View Source ReplaceAllInLine(FileInfo, String, String, Int32) Replaces all instances of a specific value from a file with another replacement value from a specified line Declaration public static void ReplaceAllInLine(FileInfo fileInfo, string oldValue, string replacementValue, int line) Parameters Type Name Description System.IO.FileInfo fileInfo The FileInfo instance to write the value to System.String oldValue The value to replace System.String replacementValue The replacement value System.Int32 line The line number to replace from | Improve this Doc View Source ReplaceInLines(FileInfo, Dictionary<KeyValuePair<String, String>, Int32>) Replaces all instances of a specific value from a file with another replacement value from a specified line. This overload facilitates the replacement through a Dictionary where the key's is an instance of System.Collections.Generic.KeyValuePair`2 and the value is an int. This allows for unique replacements to occur in more than one line Declaration public static void ReplaceInLines(FileInfo fileInfo, Dictionary<KeyValuePair<string, string>, int> replacementDict) Parameters Type Name Description System.IO.FileInfo fileInfo The FileInfo instance to write the value to System.Collections.Generic.Dictionary < System.Collections.Generic.KeyValuePair < System.String , System.String >, System.Int32 > replacementDict A Dictionary of replacement values and line numbers | Improve this Doc View Source ReplaceLine(FileInfo, String, Int32) Replaces an entire line with a replacement value. Declaration public static void ReplaceLine(FileInfo fileInfo, string replacementValue, int line) Parameters Type Name Description System.IO.FileInfo fileInfo The FileInfo instance to write the value to System.String replacementValue The replacement value System.Int32 line The line number to replace from | Improve this Doc View Source ReplaceLines(FileInfo, Dictionary<String, Int32>) Replace an entire line with a replacement value. This overload uses a Dictionary of replacement values and line numbers to replace more than one line. Declaration public static void ReplaceLines(FileInfo fileInfo, Dictionary<string, int> replacementValueLine) Parameters Type Name Description System.IO.FileInfo fileInfo The FileInfo instance to write the value to System.Collections.Generic.Dictionary < System.String , System.Int32 > replacementValueLine A Dictionary of replacement values and line number | Improve this Doc View Source WriteLine(FileInfo, String) Appends a string value into the file. Declaration public static void WriteLine(FileInfo fileInfo, string value) Parameters Type Name Description System.IO.FileInfo fileInfo The FileInfo instance to write the value to System.String value The string value to write"
  },
  "api/PowerPlug.PowerPlugFile.html": {
    "href": "api/PowerPlug.PowerPlugFile.html",
    "title": "Namespace PowerPlug.PowerPlugFile",
    "keywords": "Namespace PowerPlug.PowerPlugFile Classes FileUtilities A static class for File utility functions PowerPlugFileBase The base class for any PowerPlug file abstraction. Representations of PowerShell entities such as a user's profile should inherit this class for abstraction. Profile An abstracted representation of the location of a user's PowerShell $PROFILE path"
  },
  "api/PowerPlug.PowerPlugFile.PowerPlugFileBase.html": {
    "href": "api/PowerPlug.PowerPlugFile.PowerPlugFileBase.html",
    "title": "Class PowerPlugFileBase",
    "keywords": "Class PowerPlugFileBase The base class for any PowerPlug file abstraction. Representations of PowerShell entities such as a user's profile should inherit this class for abstraction. Inheritance System.Object PowerPlugFileBase Profile Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : PowerPlug.PowerPlugFile Assembly : PowerPlug.dll Syntax public abstract class PowerPlugFileBase Constructors | Improve this Doc View Source PowerPlugFileBase(FileInfo) Sets initial variables given a FileInfo Declaration protected PowerPlugFileBase(FileInfo fileInfo) Parameters Type Name Description System.IO.FileInfo fileInfo The FileInfo instance in order to create a PowerPlug file | Improve this Doc View Source PowerPlugFileBase(String) Sets initial variables given a pathname Declaration protected PowerPlugFileBase(string path) Parameters Type Name Description System.String path The pathname in order to create a PowerPlug file Properties | Improve this Doc View Source FileInfo The FileInfo of the path provided Declaration public FileInfo FileInfo { get; } Property Value Type Description System.IO.FileInfo | Improve this Doc View Source FileParentDir The DirectoryInfo of the parent folder of the path provided Declaration public DirectoryInfo FileParentDir { get; } Property Value Type Description System.IO.DirectoryInfo"
  },
  "api/PowerPlug.PowerPlugFile.Profile.html": {
    "href": "api/PowerPlug.PowerPlugFile.Profile.html",
    "title": "Class Profile",
    "keywords": "Class Profile An abstracted representation of the location of a user's PowerShell $PROFILE path Inheritance System.Object PowerPlugFileBase Profile Inherited Members PowerPlugFileBase.FileInfo PowerPlugFileBase.FileParentDir System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : PowerPlug.PowerPlugFile Assembly : PowerPlug.dll Syntax public class Profile : PowerPlugFileBase Constructors | Improve this Doc View Source Profile(FileInfo) Sets initial variables given a FileInfo Declaration public Profile(FileInfo fileInfo) Parameters Type Name Description System.IO.FileInfo fileInfo The FileInfo instance in order to create a PowerPlug file | Improve this Doc View Source Profile(String) Sets initial variables given a pathname Declaration public Profile(string path) Parameters Type Name Description System.String path The pathname in order to create a PowerPlug file Methods | Improve this Doc View Source GetProfile() Return's a new Profile object containing information about the user's $PROFILE path Declaration public static Profile GetProfile() Returns Type Description Profile Exceptions Type Condition System.Management.Automation.SessionStateException A SessionStateException is thrown if the user's $PROFILE cannot be found | Improve this Doc View Source ProfileExists() Runs a PowerShell script to check if the user's $PROFILE path exists. The command run internally is Test-Path $PROFILE Declaration public static bool ProfileExists() Returns Type Description System.Boolean"
  },
  "api/PowerPlug.PowerPlugUtilities.html": {
    "href": "api/PowerPlug.PowerPlugUtilities.html",
    "title": "Namespace PowerPlug.PowerPlugUtilities",
    "keywords": "Namespace PowerPlug.PowerPlugUtilities Classes ImmutableRange<T> The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. IntRange The range class represents a range of int values. Unlike other IRangify<T> implementing classes, IntRange contains an System.Collections.Generic.IEnumerator<T> of type int to enumerate through all of the values between the minimum and maximum ranges. By convention, both sides of the range should be inclusive values. Range<T> The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. Interfaces IRangify<T> The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values."
  },
  "api/PowerPlug.PowerPlugUtilities.ImmutableRange-1.html": {
    "href": "api/PowerPlug.PowerPlugUtilities.ImmutableRange-1.html",
    "title": "Class ImmutableRange<T>",
    "keywords": "Class ImmutableRange<T> The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. Inheritance System.Object ImmutableRange<T> Implements IRangify <T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : PowerPlug.PowerPlugUtilities Assembly : PowerPlug.dll Syntax public class ImmutableRange<T> : IRangify<T> where T : IComparable<T> Type Parameters Name Description T The generic parameter Constructors | Improve this Doc View Source ImmutableRange(T, T) Creates a new instance of the ImmutableRange class. This class is immutable - for the mutable version, see Range<T> Declaration protected ImmutableRange(T minimum, T maximum) Parameters Type Name Description T minimum The minimum value T maximum The maximum value Properties | Improve this Doc View Source Maximum The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. Declaration public T Maximum { get; } Property Value Type Description T | Improve this Doc View Source Minimum The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. Declaration public T Minimum { get; } Property Value Type Description T Methods | Improve this Doc View Source ContainsRange(IRangify<T>) The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. Declaration public bool ContainsRange(IRangify<T> range) Parameters Type Name Description IRangify <T> range Returns Type Description System.Boolean | Improve this Doc View Source ContainsValue(T) The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. Declaration public bool ContainsValue(T value) Parameters Type Name Description T value The value to test Returns Type Description System.Boolean True if the value is inside Range, else false | Improve this Doc View Source IsInsideRange(IRangify<T>) The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. Declaration public bool IsInsideRange(IRangify<T> range) Parameters Type Name Description IRangify <T> range Returns Type Description System.Boolean True if range is inclusive, else false | Improve this Doc View Source IsValid() The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. Declaration public bool IsValid() Returns Type Description System.Boolean True if range is valid, else false | Improve this Doc View Source ToString() The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IRangify<T>"
  },
  "api/PowerPlug.PowerPlugUtilities.IntRange.html": {
    "href": "api/PowerPlug.PowerPlugUtilities.IntRange.html",
    "title": "Class IntRange",
    "keywords": "Class IntRange The range class represents a range of int values. Unlike other IRangify<T> implementing classes, IntRange contains an System.Collections.Generic.IEnumerator<T> of type int to enumerate through all of the values between the minimum and maximum ranges. By convention, both sides of the range should be inclusive values. Inheritance System.Object Range < System.Int32 > IntRange Implements IRangify < System.Int32 > System.Collections.Generic.IEnumerable < System.Int32 > System.Collections.IEnumerable Inherited Members Range<Int32>.Minimum Range<Int32>.Maximum Range<Int32>.ToString() Range<Int32>.IsValid() Range<Int32>.ContainsValue(Int32) Range<Int32>.IsInsideRange(IRangify<Int32>) Range<Int32>.ContainsRange(IRangify<Int32>) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : PowerPlug.PowerPlugUtilities Assembly : PowerPlug.dll Syntax public class IntRange : Range<int>, IRangify<int>, IEnumerable<int>, IEnumerable Constructors | Improve this Doc View Source IntRange(Int32, Int32) Creates a new instance of IntRange, specifying the minimum and maximum values. Declaration public IntRange(int minimum, int maximum) Parameters Type Name Description System.Int32 minimum System.Int32 maximum Methods | Improve this Doc View Source GetEnumerator() Returns an instance of the IntRangeEnumerator that's used to enumerate through the range values of this instance. Declaration public IEnumerator<int> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < System.Int32 > An instance of the IntRangeEnumerator class Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Returns an instance of the IntRangeEnumerator that's used to enumerate through the range values of this instance. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator An instance of the IntRangeEnumerator class Implements IRangify<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/PowerPlug.PowerPlugUtilities.IRangify-1.html": {
    "href": "api/PowerPlug.PowerPlugUtilities.IRangify-1.html",
    "title": "Interface IRangify<T>",
    "keywords": "Interface IRangify<T> The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. Namespace : PowerPlug.PowerPlugUtilities Assembly : PowerPlug.dll Syntax public interface IRangify<T> where T : IComparable<T> Type Parameters Name Description T The generic parameter Properties | Improve this Doc View Source Maximum The maximum value of this range Declaration T Maximum { get; } Property Value Type Description T | Improve this Doc View Source Minimum The minimum value of this range Declaration T Minimum { get; } Property Value Type Description T Methods | Improve this Doc View Source ContainsValue(T) Determines if the provided value is inside the range. Declaration bool ContainsValue(T value) Parameters Type Name Description T value The value to test Returns Type Description System.Boolean True if the value is inside Range, else false | Improve this Doc View Source IsInsideRange(IRangify<T>) Determines if this Range is inside the bounds of another range. Declaration bool IsInsideRange(IRangify<T> range) Parameters Type Name Description IRangify <T> range The parent range to test on Returns Type Description System.Boolean True if range is inclusive, else false | Improve this Doc View Source IsValid() Determines if the range is valid. Declaration bool IsValid() Returns Type Description System.Boolean True if range is valid, else false"
  },
  "api/PowerPlug.PowerPlugUtilities.Range-1.html": {
    "href": "api/PowerPlug.PowerPlugUtilities.Range-1.html",
    "title": "Class Range<T>",
    "keywords": "Class Range<T> The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. Inheritance System.Object Range<T> IntRange Implements IRangify <T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : PowerPlug.PowerPlugUtilities Assembly : PowerPlug.dll Syntax public class Range<T> : IRangify<T> where T : IComparable<T> Type Parameters Name Description T The generic parameter Constructors | Improve this Doc View Source Range(T, T) Creates a new instance of the Range class. This class is mutable - for the immutable version, see ImmutableRange<T> Declaration protected Range(T minimum, T maximum) Parameters Type Name Description T minimum The minimum value T maximum The maximum value Properties | Improve this Doc View Source Maximum The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. Declaration public T Maximum { get; set; } Property Value Type Description T | Improve this Doc View Source Minimum The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. Declaration public T Minimum { get; set; } Property Value Type Description T Methods | Improve this Doc View Source ContainsRange(IRangify<T>) The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. Declaration public bool ContainsRange(IRangify<T> range) Parameters Type Name Description IRangify <T> range Returns Type Description System.Boolean | Improve this Doc View Source ContainsValue(T) The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. Declaration public bool ContainsValue(T value) Parameters Type Name Description T value The value to test Returns Type Description System.Boolean True if the value is inside Range, else false | Improve this Doc View Source IsInsideRange(IRangify<T>) The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. Declaration public bool IsInsideRange(IRangify<T> range) Parameters Type Name Description IRangify <T> range Returns Type Description System.Boolean True if range is inclusive, else false | Improve this Doc View Source IsValid() The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. Declaration public bool IsValid() Returns Type Description System.Boolean True if range is valid, else false | Improve this Doc View Source ToString() The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IRangify<T>"
  },
  "articles/changelog.html": {
    "href": "articles/changelog.html",
    "title": "Changelogs",
    "keywords": "Changelogs Future changelogs between full versions will be here. 0.2.6 Release of PowerPlug Fixed an issue where a Set-Byname would not occur Fixed an issue where Remove-Byname would not remove the alias Fixed an issue where Set-Byname would not replace old aliases with the new one Other internal fixes New Get-Help documentation Improved Performance PowerPlugDocs"
  },
  "articles/releases.html": {
    "href": "articles/releases.html",
    "title": "GitHub Releases",
    "keywords": "GitHub Releases The following list is an up-to-date collection of all releases and descriptions to date. 0.2.7 Release of PowerPlug This release contains a few fixes on PowerShell Help-URI and also fixing the PSD1 script in the module. This is a very minor release and the 0.2.6 release contained more important fixes to refer to . 0.2.6 Release of PowerPlug The first full release of PowerPlug comes with a variety of bug fixes and improvements. Versions 0.2.1-beta, 0.2.2, 0.2.3, 0.2.4, and 0.2.5 were tested internally. Install PowerPlug from the PowerShell Gallery with: Install-Module -Name PowerPlug Features New Get-Help documentation Improved Performance PowerPlugDocs Bug Fixes Fixed an issue where a Set-Byname would not occur Fixed an issue where Remove-Byname would not remove the alias Fixed an issue where Set-Byname would not replace old aliases with the new one Other internal fixes 0.2.1-alpha Release of PowerPlug The second and patch release of PowerPlug is now available on the PowerShell gallery as a prerelease available here: PowerPlug Install PowerPlug to PowerShell with: Install-Module -Name PowerPlug -AllowPrerelease Features New-Byname - for creating a new alias to your Profile across various sessions New-Byname [-Name] <string> [-Value] <string> [-Description <string>] [-Option {None | ReadOnly | Constant | Private | AllScope | Unspecified}] [-PassThru] [-WhatIf] [-Confirm] [-Scope {Global | Local | Private | Numbered scopes | Script}] [-Force] [<CommonParameters>] The underlying structure of the command is the same as New-Alias, however, New-Byname writes to the user's $PROFILE Set-Byname - for setting an alias to your Profile across various sessions Set-Byname [-Name] <string> [-Value] <string> [-Description <string>] [-Option {None | ReadOnly | Constant | Private | AllScope | Unspecified}] [-PassThru] [-WhatIf] [-Confirm] [-Scope {Global | Local | Private | Numbered scopes | Script}] [-Force] [<CommonParameters>] The underlying structure of the command is the same as Set-Alias, however, Set-Byname writes to the user's $PROFILE Remove-Byname - for removing an alias to your Profile across various sessions Remove-Byname [-Name] <string> [-Scope {Global | Local | Private | Numbered scopes | Script}] [-Force] [<CommonParameters>] The underlying structure of the command is the same as Remove-Alias, however, Remove-Byname removes and \"bynames\" from the user's $PROFILE 0.1.0-alpha Release of PowerPlug The initial release of PowerPlug is now available. Import the PowerPlug dll to PowerShell with: ipmo \"path/to/PowerPlug.dll\" Features Move-Trash - Moves a file or directory to the Recycle Bin instead of erasing it off the system. Move-Trash [-Path] <string> [[-List]] [<CommonParameters>] Compare-Hash - Compares a file hash with a known signature and displays whether the signature was a match Compare-Hash [-Hash] {SHA256 | SHA512 | MD5} [-Path] <string> [-Signature] <string> [<CommonParameters>]"
  },
  "index.html": {
    "href": "index.html",
    "title": "PowerPlug Docs",
    "keywords": "PowerPlug Docs PowerPlug is a PowerShell 7 cmdlet library. The main mission of PowerPlug is to make PowerShell development faster and eaiser. PowerPlug is run through C# PSCmdlet classes from the PowerShell Standard Library. The site is useful for version changelogs, latest releases, and cmdlet documentation. Execution Install from PS Gallery The latest release can be found at PowerPlug Releases . You can install the prerelease to PowerShell by running: Install-Module -Name PowerPlug Install from GitHub Releases The latest zip release can be found under the GitHub Releases Page . You can use the PowerPlug.dll binary and place it within any other directory, but conventionally in $env:PSModulePath . Importing into session To import the dll for the session, you can run: ipmo PowerPlug or Import-Module PowerPlug . You can use the previous commands within the $PROFILE to load the library on PowerShell startup. Run Get-Module PowerPlug to confirm the import ran successfully. Contributing We are actively looking for contributors to work on all aspects of the code base ― from documentation to c# cmdlet utilities. Building PowerPlug Prerequisites: PowerShell 7.0 or Later Visual Studio 2017 or Later OR VSCode .NET 5 The default language setting for this project is C# 9.0. The project can be built using dotnet build and the output will display the AssemblyPath . PowerShell 7 can be set as the startup item on Visual Studio to dynamically debug PowerPlug. Documentation There are three components to PowerPlug documentation: Assembly Documentation PowerShell Help File Documentation Miscellaneous Documentation (README.md, Wiki's, Discussions, etc...) All PowerPlug methods are documented using .NET XML documentation. This is compiled using DocFX with the docfx.json file under the DocFX folder . DocFX creates static HTML pages which are used by https://powerplug.me . THe PowerPlug.dll-Help.xml file is the MAML file that is used to generate the Get-Help documentation for PowerPlug cmdlets. Lastly, as a fluid repository, many files change and constantly need to be documented and updated. Roadmap There are two planned releases - the latest being by July 2021 : 0.2.6 - First full release of PowerPlug 0.3.0 - Full release with a statistics cmdlets in its own library, comprehensive documentation in the code-base and PowerShell, robust cmdlets State PowerPlug is a very fluid project and you may encounter issues during execution, especially for preleases. For more information visit, PowerPlug Repo . Or, to report an issue visit, PowerPlug Issues . If you are able to fix the isssue yourself by building the project, give our repo a Fork, would ya? Licensing PowerPlug is licensed under the GNU General Public License v3.0. The GNU General Public License is a free, copyleft license for software and other kinds of works."
  }
}